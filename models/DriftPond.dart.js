// Generated by dart2js, the Dart to JavaScript compiler version: 0.1.2.0_r24694.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
$$._HTMLElement = {"": "Element;"};

$$.AnchorElement = {"": "_HTMLElement;name=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.AnimationEvent = {"": "Event;"};

$$.AreaElement = {"": "_HTMLElement;"};

$$.AudioElement = {"": "MediaElement;"};

$$.AutocompleteErrorEvent = {"": "Event;"};

$$.BRElement = {"": "_HTMLElement;"};

$$.BarProp = {"": "Interceptor;"};

$$.BaseElement = {"": "_HTMLElement;"};

$$.BeforeLoadEvent = {"": "Event;"};

$$.BodyElement = {"": "_HTMLElement;"};

$$.ButtonElement = {"": "_HTMLElement;name=,value="};

$$.CDataSection = {"": "Text;"};

$$.CanvasElement = {"": "_HTMLElement;height=,width=",
  getContext$2: function(receiver, contextId, attrs) {
    return receiver.getContext(contextId);
  },
  getContext$1: function($receiver, contextId) {
    return this.getContext$2($receiver, contextId, null);
  }
};

$$.CanvasGradient = {"": "Interceptor;"};

$$.CanvasPattern = {"": "Interceptor;"};

$$.CanvasRenderingContext = {"": "Interceptor;"};

$$.CanvasRenderingContext2D = {"": "CanvasRenderingContext;fillStyle},lineWidth},strokeStyle}",
  arcTo$5: function(receiver, x1, y1, x2, y2, radius) {
    return receiver.arcTo(x1, y1, x2, y2, radius);
  },
  beginPath$0: function(receiver) {
    return receiver.beginPath();
  },
  clearRect$4: function(receiver, x, y, width, height) {
    return receiver.clearRect(x, y, width, height);
  },
  fill$1: function(receiver, winding) {
    return receiver.fill(winding);
  },
  fill$0: function($receiver) {
    return $receiver.fill();
  },
  fillRect$4: function(receiver, x, y, width, height) {
    return receiver.fillRect(x, y, width, height);
  },
  moveTo$2: function(receiver, x, y) {
    return receiver.moveTo(x, y);
  },
  restore$0: function(receiver) {
    return receiver.restore();
  },
  rotate$1: function(receiver, angle) {
    return receiver.rotate(angle);
  },
  save$0: function(receiver) {
    return receiver.save();
  },
  scale$2: function(receiver, sx, sy) {
    return receiver.scale(sx, sy);
  },
  stroke$0: function(receiver) {
    return receiver.stroke();
  },
  translate$2: function(receiver, tx, ty) {
    return receiver.translate(tx, ty);
  }
};

$$.CharacterData = {"": "Node;length="};

$$.CloseEvent = {"": "Event;"};

$$.Comment = {"": "CharacterData;"};

$$.CompositionEvent = {"": "UIEvent;"};

$$.ContentElement = {"": "_HTMLElement;"};

$$.CssFontFaceLoadEvent = {"": "Event;"};

$$.CssStyleDeclaration = {"": "Interceptor;length=",
  getPropertyValue$1: function(receiver, propertyName) {
    var propValue = receiver.getPropertyValue(propertyName);
    return propValue != null ? propValue : "";
  },
  setProperty$3: function(receiver, propertyName, value, priority) {
    var exception;
    try {
      if (priority == null)
        priority = "";
      receiver.setProperty(propertyName, value, priority);
      if (!!receiver.setAttribute)
        receiver.setAttribute(propertyName, value);
    } catch (exception) {
      $.unwrapException(exception);
    }

  },
  get$backgroundImage: function(receiver) {
    return this.getPropertyValue$1(receiver, "background-image");
  },
  set$backgroundImage: function(receiver, value) {
    this.setProperty$3(receiver, "background-image", value, "");
  },
  get$clear: function(receiver) {
    var propValue = receiver.getPropertyValue("clear");
    return propValue != null ? propValue : "";
  },
  clear$0: function($receiver) {
    return this.get$clear($receiver).call$0();
  },
  get$color: function(receiver) {
    var propValue = receiver.getPropertyValue("color");
    return propValue != null ? propValue : "";
  }
};

$$.CustomElementConstructor = {"": "Interceptor;"};

$$.CustomEvent = {"": "Event;"};

$$.DListElement = {"": "_HTMLElement;"};

$$.DataListElement = {"": "_HTMLElement;"};

$$.DetailsElement = {"": "_HTMLElement;"};

$$.DeviceMotionEvent = {"": "Event;"};

$$.DeviceOrientationEvent = {"": "Event;"};

$$.DialogElement = {"": "_HTMLElement;"};

$$.DivElement = {"": "_HTMLElement;"};

$$.Document = {"": "Node;children="};

$$.DocumentFragment = {"": "Node;",
  get$children: function(receiver) {
    if (receiver._children == null)
      receiver._children = $.FilteredElementList$(receiver);
    return receiver._children;
  },
  set$innerHtml: function(receiver, value) {
    var t1, e, nodes;
    t1 = this.get$nodes(receiver);
    t1.clear$0(t1);
    e = $.Element_Element$tag("div");
    t1 = $.getInterceptor$x(e);
    t1.set$innerHtml(e, value);
    nodes = $.List_List$from(t1.get$nodes(e), false);
    t1 = this.get$nodes(receiver);
    t1.addAll$1(t1, nodes);
  }
};

$$.DocumentType = {"": "Node;"};

$$.DomError = {"": "Interceptor;name="};

$$.DomException = {"": "Interceptor;",
  get$name: function(receiver) {
    var errorName = receiver.name;
    if ($.Device_isWebKit() === true && errorName === "SECURITY_ERR")
      return "SecurityError";
    if ($.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
      return "SyntaxError";
    return errorName;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.Element = {"": "Node;innerHtml:innerHTML},$$dom_children:children=",
  get$attributes: function(receiver) {
    return new $._ElementAttributeMap(receiver);
  },
  set$attributes: function(receiver, value) {
    var attributes, t1, t2, key;
    attributes = $._ElementAttributeMap$(receiver);
    attributes.clear$0(attributes);
    for (t1 = $.LinkedHashMapKeyIterable$(value)._map, t1 = $.LinkedHashMapKeyIterator$(t1, t1._modifications), t2 = attributes._element; t1.moveNext$0();) {
      key = t1._liblib1$_current;
      t2.setAttribute(key, value.$index(value, key));
    }
  },
  get$children: function(receiver) {
    return $._ChildrenElementList$_wrap(receiver);
  },
  get$localName: function(receiver) {
    return receiver.localName;
  },
  toString$0: function(receiver) {
    return this.get$localName(receiver);
  },
  get$model: function(receiver) {
    return $.get$model$x($.get$TemplateElement_mdvPackage().call$1(receiver));
  },
  get$onClick: function(receiver) {
    return $.EventStreamProvider_click.forTarget$1(receiver);
  },
  $isElement: true,
  $asElement: null
};

$$.EmbedElement = {"": "_HTMLElement;height=,name=,width="};

$$.ErrorEvent = {"": "Event;"};

$$.Event = {"": "Interceptor;"};

$$.EventException = {"": "Interceptor;name=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.EventTarget = {"": "Interceptor;"};

$$.FieldSetElement = {"": "_HTMLElement;name="};

$$.FileError = {"": "Interceptor;"};

$$.FileException = {"": "Interceptor;name=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.FocusEvent = {"": "UIEvent;"};

$$.FormElement = {"": "_HTMLElement;length=,name="};

$$.HRElement = {"": "_HTMLElement;"};

$$.HashChangeEvent = {"": "Event;"};

$$.HeadElement = {"": "_HTMLElement;"};

$$.HeadingElement = {"": "_HTMLElement;"};

$$.HtmlCollection = {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function () { return [$.Node]; },
  $isIterable: true,
  $asIterable: function () { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.HtmlDocument = {"": "Document;"};

$$.HtmlElement = {"": "_HTMLElement;"};

$$.HtmlFormControlsCollection = {"": "HtmlCollection;"};

$$.HtmlOptionsCollection = {"": "HtmlCollection;"};

$$.HttpRequestProgressEvent = {"": "ProgressEvent;"};

$$.IFrameElement = {"": "_HTMLElement;height=,name=,width="};

$$.ImageElement = {"": "_HTMLElement;height=,width=,x=,y="};

$$.InputElement = {"": "_HTMLElement;height=,name=,value=,width=", $isElement: true, $asElement: null};

$$.KeyboardEvent = {"": "UIEvent;"};

$$.KeygenElement = {"": "_HTMLElement;name="};

$$.LIElement = {"": "_HTMLElement;value="};

$$.LabelElement = {"": "_HTMLElement;"};

$$.LegendElement = {"": "_HTMLElement;"};

$$.LinkElement = {"": "_HTMLElement;"};

$$.MapElement = {"": "_HTMLElement;name="};

$$.MediaElement = {"": "_HTMLElement;"};

$$.MediaError = {"": "Interceptor;"};

$$.MediaKeyError = {"": "Interceptor;"};

$$.MediaKeyEvent = {"": "Event;"};

$$.MediaKeyMessageEvent = {"": "Event;"};

$$.MediaKeyNeededEvent = {"": "Event;"};

$$.MediaStreamEvent = {"": "Event;"};

$$.MediaStreamTrackEvent = {"": "Event;"};

$$.MenuElement = {"": "_HTMLElement;"};

$$.MessageEvent = {"": "Event;"};

$$.MetaElement = {"": "_HTMLElement;name="};

$$.MeterElement = {"": "_HTMLElement;value="};

$$.MidiConnectionEvent = {"": "Event;"};

$$.MidiMessageEvent = {"": "Event;"};

$$.ModElement = {"": "_HTMLElement;"};

$$.MouseEvent = {"": "UIEvent;"};

$$.MutationEvent = {"": "Event;"};

$$.Navigator = {"": "Interceptor;"};

$$.NavigatorUserMediaError = {"": "Interceptor;name="};

$$.Node = {"": "EventTarget;",
  get$nodes: function(receiver) {
    return new $._ChildNodeListLazy(receiver);
  },
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      t1.removeChild(receiver);
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = receiver.parentNode;
      $.$$dom_replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return receiver;
  },
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? $.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild, oldChild);
  }
};

$$.NodeList = {"": "Interceptor_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function () { return [$.Node]; },
  $isIterable: true,
  $asIterable: function () { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Notation = {"": "Node;"};

$$.OListElement = {"": "_HTMLElement;"};

$$.ObjectElement = {"": "_HTMLElement;height=,name=,width="};

$$.OptGroupElement = {"": "_HTMLElement;"};

$$.OptionElement = {"": "_HTMLElement;value="};

$$.OutputElement = {"": "_HTMLElement;name=,value="};

$$.OverflowEvent = {"": "Event;"};

$$.PageTransitionEvent = {"": "Event;"};

$$.ParagraphElement = {"": "_HTMLElement;"};

$$.ParamElement = {"": "_HTMLElement;name=,value="};

$$.PopStateEvent = {"": "Event;"};

$$.PositionError = {"": "Interceptor;"};

$$.PreElement = {"": "_HTMLElement;"};

$$.ProcessingInstruction = {"": "Node;"};

$$.ProgressElement = {"": "_HTMLElement;value="};

$$.ProgressEvent = {"": "Event;"};

$$.QuoteElement = {"": "_HTMLElement;"};

$$.ResourceProgressEvent = {"": "ProgressEvent;"};

$$.RtcDataChannelEvent = {"": "Event;"};

$$.RtcDtmfToneChangeEvent = {"": "Event;"};

$$.RtcIceCandidateEvent = {"": "Event;"};

$$.ScriptElement = {"": "_HTMLElement;"};

$$.SecurityPolicyViolationEvent = {"": "Event;"};

$$.SelectElement = {"": "_HTMLElement;length=,name=,value="};

$$.ShadowElement = {"": "_HTMLElement;"};

$$.ShadowRoot = {"": "DocumentFragment;innerHtml:innerHTML}"};

$$.SourceElement = {"": "_HTMLElement;"};

$$.SpanElement = {"": "_HTMLElement;"};

$$.SpeechInputEvent = {"": "Event;"};

$$.SpeechRecognitionError = {"": "Event;"};

$$.SpeechRecognitionEvent = {"": "Event;"};

$$.SpeechSynthesisEvent = {"": "Event;name="};

$$.StorageEvent = {"": "Event;"};

$$.StyleElement = {"": "_HTMLElement;"};

$$.TableCaptionElement = {"": "_HTMLElement;"};

$$.TableCellElement = {"": "_HTMLElement;"};

$$.TableColElement = {"": "_HTMLElement;"};

$$.TableElement = {"": "_HTMLElement;"};

$$.TableRowElement = {"": "_HTMLElement;"};

$$.TableSectionElement = {"": "_HTMLElement;"};

$$.TemplateElement = {"": "_HTMLElement;"};

$$.Text = {"": "CharacterData;"};

$$.TextAreaElement = {"": "_HTMLElement;name=,value="};

$$.TextEvent = {"": "UIEvent;"};

$$.TitleElement = {"": "_HTMLElement;"};

$$.TouchEvent = {"": "UIEvent;"};

$$.TrackElement = {"": "_HTMLElement;"};

$$.TrackEvent = {"": "Event;"};

$$.TransitionEvent = {"": "Event;"};

$$.UIEvent = {"": "Event;"};

$$.UListElement = {"": "_HTMLElement;"};

$$.UnknownElement = {"": "_HTMLElement;"};

$$.VideoElement = {"": "MediaElement;height=,width="};

$$.WheelEvent = {"": "MouseEvent;"};

$$.Window = {"": "EventTarget;name=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.XPathException = {"": "Interceptor;name=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$._Attr = {"": "Node;name=,value="};

$$._Entity = {"": "Node;"};

$$._NamedNodeMap = {"": "Interceptor_ListMixin_ImmutableListMixin1;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function () { return [$.Node]; },
  $isIterable: true,
  $asIterable: function () { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.VersionChangeEvent = {"": "Event;"};

$$.AElement = {"": "StyledElement;"};

$$.AltGlyphElement = {"": "TextPositioningElement;"};

$$.AnimateElement = {"": "AnimationElement;"};

$$.AnimateMotionElement = {"": "AnimationElement;"};

$$.AnimateTransformElement = {"": "AnimationElement;"};

$$.AnimatedLength = {"": "Interceptor;"};

$$.AnimatedLengthList = {"": "Interceptor;"};

$$.AnimatedNumber = {"": "Interceptor;"};

$$.AnimatedNumberList = {"": "Interceptor;"};

$$.AnimationElement = {"": "SvgElement;"};

$$.CircleElement = {"": "StyledElement;"};

$$.ClipPathElement = {"": "StyledElement;"};

$$.DefsElement = {"": "StyledElement;"};

$$.DescElement = {"": "StyledElement;"};

$$.EllipseElement = {"": "StyledElement;"};

$$.FEBlendElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEColorMatrixElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEComponentTransferElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FECompositeElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEConvolveMatrixElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEDiffuseLightingElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEDisplacementMapElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEDistantLightElement = {"": "SvgElement;"};

$$.FEFloodElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEFuncAElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncBElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncGElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncRElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEGaussianBlurElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEImageElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEMergeElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEMergeNodeElement = {"": "SvgElement;"};

$$.FEMorphologyElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEOffsetElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEPointLightElement = {"": "SvgElement;x=,y="};

$$.FESpecularLightingElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FESpotLightElement = {"": "SvgElement;x=,y="};

$$.FETileElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FETurbulenceElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FilterElement = {"": "StyledElement;height=,width=,x=,y="};

$$.ForeignObjectElement = {"": "StyledElement;height=,width=,x=,y="};

$$.GElement = {"": "StyledElement;"};

$$.ImageElement0 = {"": "StyledElement;height=,width=,x=,y="};

$$.LineElement = {"": "StyledElement;"};

$$.LinearGradientElement = {"": "_GradientElement;"};

$$.MarkerElement = {"": "StyledElement;"};

$$.MaskElement = {"": "StyledElement;height=,width=,x=,y="};

$$.MetadataElement = {"": "SvgElement;"};

$$.PathElement = {"": "StyledElement;"};

$$.PatternElement = {"": "StyledElement;height=,width=,x=,y="};

$$.PolygonElement = {"": "StyledElement;"};

$$.PolylineElement = {"": "StyledElement;"};

$$.RadialGradientElement = {"": "_GradientElement;"};

$$.RectElement = {"": "StyledElement;height=,width=,x=,y="};

$$.ScriptElement0 = {"": "SvgElement;"};

$$.SetElement = {"": "AnimationElement;"};

$$.StopElement = {"": "StyledElement;"};

$$.StyleElement0 = {"": "SvgElement;"};

$$.StyledElement = {"": "SvgElement;"};

$$.SvgDocument = {"": "Document;"};

$$.SvgElement = {"": "Element;",
  get$children: function(receiver) {
    return $.FilteredElementList$(receiver);
  },
  set$children: function(receiver, value) {
    var children = this.get$children(receiver);
    children.clear$0(children);
    children.addAll$1(children, value);
  },
  set$innerHtml: function(receiver, svg) {
    var container, t1;
    container = $.Element_Element$tag("div");
    t1 = $.getInterceptor$x(container);
    t1.set$innerHtml(container, "<svg version=\"1.1\">" + svg + "</svg>");
    this.set$children(receiver, $.get$children$x($.$index$asx(t1.get$children(container), 0)));
  },
  get$$$dom_children: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot get dom_children on SVG."));
  }
};

$$.SvgException = {"": "Interceptor;name=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.SvgSvgElement = {"": "StyledElement;height=,width=,x=,y="};

$$.SwitchElement = {"": "StyledElement;"};

$$.SymbolElement = {"": "StyledElement;"};

$$.TSpanElement = {"": "TextPositioningElement;"};

$$.TextContentElement = {"": "StyledElement;"};

$$.TextElement = {"": "TextPositioningElement;"};

$$.TextPathElement = {"": "TextContentElement;"};

$$.TextPositioningElement = {"": "TextContentElement;x=,y="};

$$.TitleElement0 = {"": "StyledElement;"};

$$.UseElement = {"": "StyledElement;height=,width=,x=,y="};

$$.ViewElement = {"": "SvgElement;"};

$$.ZoomEvent = {"": "UIEvent;"};

$$._GradientElement = {"": "StyledElement;"};

$$._SVGComponentTransferFunctionElement = {"": "SvgElement;"};

$$.AudioProcessingEvent = {"": "Event;"};

$$.OfflineAudioCompletionEvent = {"": "Event;"};

$$.ContextEvent = {"": "Event;"};

$$.RenderingContext = {"": "CanvasRenderingContext;"};

$$.SqlError = {"": "Interceptor;"};

$$.SqlException = {"": "Interceptor;"};

$$.TypedData = {"": "Interceptor;",
  _invalidIndex$2: function(receiver, index, $length) {
    var t1 = $.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$ge(index, $length))
      throw $.wrapException($.RangeError$range(index, 0, $length));
    else
      throw $.wrapException($.ArgumentError$("Invalid list index " + $.S(index)));
  }
};

$$.Uint8ClampedList = {"": "Uint8List;",
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout1(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout1: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout1(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout1: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, receiver.length, 0, null);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1("]");
    return buffer.toString$0(buffer);
  },
  $isList: true,
  $asList: function () { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function () { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint8List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, receiver.length, 0, null);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1("]");
    return buffer.toString$0(buffer);
  },
  $isList: true,
  $asList: function () { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function () { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

// Bound closures
$$.BoundClosure$0 = {"": "BoundClosure;_self,_target,_liblib3$_receiver",
  call$0: function() {
    return this._self[this._target]();
  }
};

$$.BoundClosure$2 = {"": "BoundClosure;_self,_target,_liblib3$_receiver",
  call$2: function(p0, p1) {
    return this._self[this._target](p0, p1);
  }
};

$$.BoundClosure$1 = {"": "BoundClosure;_self,_target,_liblib3$_receiver",
  call$1: function(p0) {
    return this._self[this._target](p0);
  }
};

$$.Closure$main = {"": "Closure;call$0,$name"};

$$.Closure$_processWorkerMessage = {"": "Closure;call$2,$name"};

$$.Closure$wrapException = {"": "Closure;call$1,$name"};

$$.Closure$toStringWrapper = {"": "Closure;call$0,$name"};

$$.Closure$invokeClosure = {"": "Closure;call$5,$name"};

$$.Closure$typeNameInChrome = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInSafari = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInOpera = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInFirefox = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInIE = {"": "Closure;call$1,$name"};

$$.Closure$constructorNameFallback = {"": "Closure;call$1,$name"};

$$.Closure$_asyncRunCallback = {"": "Closure;call$0,$name"};

$$.Closure$_nullDataHandler = {"": "Closure;call$1,$name"};

$$.Closure$_nullErrorHandler = {"": "Closure;call$1,$name"};

$$.Closure$_nullDoneHandler = {"": "Closure;call$0,$name"};

(function (reflectionData) {
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = {};
  if (!init.mangledGlobalNames) init.mangledGlobalNames = {};
  init.getterPrefix = "get$";
  init.setterPrefix = "set$";
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var descriptor = data[3];
    var classes = [];
    var functions = [];
    for (var property in descriptor) {
      if (!hasOwnProperty.call(descriptor, property)) continue;
      var element = descriptor[property];
      var firstChar = property.substring(0, 1);
      var previousProperty;
      if (firstChar == "+") {
        mangledGlobalNames[previousProperty] = property.substring(1);
      } else if (firstChar == "@") {
        property = property.substring(1);
        $[property]["@"] = element;
      } else if (typeof element === "function") {
        $[previousProperty = property] = element;
        functions.push(property);
      } else {
        previousProperty = property;
        var newDesc = {};
        var previousProp;
        for (var prop in element) {
          if (!hasOwnProperty.call(element, prop)) continue;
          firstChar = prop.substring(0, 1);
          if (firstChar == "+") {
            mangledNames[previousProp] = prop.substring(1);
          } else if (firstChar == "@" && prop != "@") {
            newDesc[prop.substring(1)]["@"] =element[prop];
          } else {
            newDesc[previousProp = prop] = element[prop];
          }
        }
        $$[property] = newDesc;
        classes.push(property);
      }
    }
    libraries.push([name, uri, classes, functions, metadata]);
  }
})([
["DriftPond.dart", "DriftPond.dart", , {
DriftModel: {"": "Model;TURTLE_COUNT,plot,name,id,width,height,turtles,deadTurtles,patches,plots,properties,ticks,play_state,timer,patchSize,maxPatchX,minPatchX,maxPatchY,minPatchY,AGENT_ID,tctx,pctx,toolbar",
  setup$0: function() {
    var colors, behavior, t1, t2, i, t, t3, t4, patch;
    this.clearTurtles$0();
    this.clearPatches$0();
    this.initPatches$0();
    colors = [$.Color$(255, 0, 0, 255), $.Color$(0, 255, 0, 255), $.Color$(0, 0, 255, 255), $.Color$(255, 255, 0, 255), $.Color$(0, 255, 255, 255)];
    behavior = $.Expression_Expression($.parse("    [\n      [\"forward\", 0.1],\n      [\"right\", [\"random\", 20] ],\n      [\"left\", [\"random\", 20] ],\n      [\"set\", \"energy\", [\"-\", \"energy\", 1] ],\n      [\"if\", [ \"<=\", \"energy\", 0], [ \"die\"] ],\n      [\"ask\", [\"patch-here\"], [\n          [ \"if\", [ \">\", \"plant-energy\", 0 ], [\n              [ \"set\", \"plant-energy\", [ \"-\", \"plant-energy\", 10 ] ],\n              [ \"set\", \"energy\", [ \"+\", \"energy\", 2] ]\n          ] ]\n      ] ],\n      [\"if\", [ \">\", \"energy\", 90], [\n          [\"if\", [ \">\", [\"random\", 100], 95 ], [\n              [\"set\", \"energy\", 50 ],\n              [ \"hatch\" ]\n          ] ]\n      ] ]\n    ]\n    ", null));
    for (t1 = this.TURTLE_COUNT, t2 = this.turtles, i = 0; i < t1; ++i) {
      t = $.Turtle$(this);
      t.$indexSet(t, "energy", 100);
      t3 = $.JSInt_methods.$mod(i, 5);
      if (t3 < 0 || t3 >= colors.length)
        throw $.ioore(t3);
      t3 = colors[t3];
      t.color = t3.clone$0(t3);
      t3 = t.interp;
      t3.load$1;
      t3.program = behavior;
      t4 = t3.owner;
      t3.agent = t4;
      t3.agents = $.AgentSet$fromAgent(t4);
      t3.curr = t3.program;
      t3.ip = 0;
      $.JSArray_methods.clear$0(t3.stack);
      t2.push(t);
    }
    behavior = $.Expression_Expression($.parse("    [\n      [ \"set\", \"plant-energy\", [ \"+\", \"plant-energy\", 1 ] ],\n      [ \"if\", [\">\", \"plant-energy\", 100 ], [\n          [ \"set\", \"plant-energy\", 100 ]\n      ] ],\n      [ \"set\", \"color-green\", \"plant-energy\" ]\n    ]\n    ", null));
    for (t1 = $.JSArray_methods.get$iterator(this.patches); t1.moveNext$0();) {
      patch = t1._current;
      t2 = $.getInterceptor$x(patch);
      t2.get$color(patch).setColor$4(0, 100, 0, 255);
      patch.setBehavior$1(behavior);
      t2.$indexSet(patch, "plant-energy", 100);
    }
  },
  DriftModel$1: function($name) {
    var pen;
    this.plot = $.Plot$("drift-pond-plot");
    this.plot.title = "Number of Bugs";
    this.plot.labelX = "time";
    pen = $.Pen$("bugs", "purple");
    pen.updater = new $.DriftModel_closure(this);
    this.plot.addPen$1(pen);
    this.plot.minY = 0;
    this.plot.maxY = 100;
    this.plot.minX = 0;
    this.plot.maxX = 50;
    this.addPlot$1(this.plot);
  }
},

DriftModel_closure: {"": "Closure;this_0",
  call$1: function(ticks) {
    return this.this_0.get$turtles().length;
  }
},

main: function() {
  $.DriftModel$("Drift Pond").restart$0();
},

DriftModel$: function($name) {
  var t1 = new $.DriftModel(60, null, $name, "drift-pond", 500, 500, $.List_List(null), $.List_List(null), $.List_List(null), $.List_List(null), $.Map_Map(), 0, 0, null, 40, 12, -12, 12, -12, 1, null, null, null);
  t1.Model$2($name, "drift-pond");
  t1.DriftModel$1($name);
  return t1;
}}],
["NetTango", "../core/ntango.dart", , {
Agent: {"": "Object;model>,color>,commands<",
  $index: function(_, key) {
    var t1;
    if (typeof key !== "string")
      return this.$$index$bailout(1, key);
    if (key === "color-red")
      return this.color.get$red();
    else if (key === "color-green")
      return this.color.get$green();
    else if (key === "color-blue")
      return this.color.get$blue();
    else if (key === "color-alpha") {
      t1 = this.color;
      return t1.get$alpha(t1);
    }
    t1 = this._props;
    return t1.$index(t1, key);
  },
  $$index$bailout: function(state0, key) {
    var t1 = $.getInterceptor(key);
    if (t1.$eq(key, "color-red"))
      return this.color.get$red();
    else if (t1.$eq(key, "color-green"))
      return this.color.get$green();
    else if (t1.$eq(key, "color-blue"))
      return this.color.get$blue();
    else if (t1.$eq(key, "color-alpha")) {
      t1 = this.color;
      return t1.get$alpha(t1);
    }
    t1 = this._props;
    return t1.$index(t1, key);
  },
  $indexSet: function(_, key, value) {
    var t1;
    if (typeof key !== "string")
      return this.$$indexSet$bailout(1, key, value);
    if (key === "color-red") {
      this.color.set$red($.toInt$0$n(value));
      this.dirty = true;
    } else if (key === "color-green") {
      this.color.set$green($.toInt$0$n(value));
      this.dirty = true;
    } else if (key === "color-blue") {
      this.color.set$blue($.toInt$0$n(value));
      this.dirty = true;
    } else if (key === "color-alpha") {
      t1 = this.color;
      t1.set$alpha(t1, $.toInt$0$n(value));
      this.dirty = true;
    } else {
      t1 = this._props;
      t1.$indexSet(t1, key, value);
    }
  },
  $$indexSet$bailout: function(state0, key, value) {
    var t1 = $.getInterceptor(key);
    if (t1.$eq(key, "color-red")) {
      this.color.set$red($.toInt$0$n(value));
      this.dirty = true;
    } else if (t1.$eq(key, "color-green")) {
      this.color.set$green($.toInt$0$n(value));
      this.dirty = true;
    } else if (t1.$eq(key, "color-blue")) {
      this.color.set$blue($.toInt$0$n(value));
      this.dirty = true;
    } else if (t1.$eq(key, "color-alpha")) {
      t1 = this.color;
      t1.set$alpha(t1, $.toInt$0$n(value));
      this.dirty = true;
    } else {
      t1 = this._props;
      t1.$indexSet(t1, key, value);
    }
  },
  isDefined$1: function($name) {
    var t1 = $.getInterceptor($name);
    return t1.$eq($name, "color-red") || t1.$eq($name, "color-green") || t1.$eq($name, "color-blue") || t1.$eq($name, "color-alpha") || this._props.containsKey$1($name);
  },
  setBehavior$1: function(behavior) {
    var t1 = this.interp;
    t1.load$1;
    t1.program = behavior;
    t1.restart$0();
  },
  tick$0: function() {
    var t1, t2;
    t1 = this.interp;
    t1.restart$0;
    t2 = t1.owner;
    t1.agent = t2;
    t1.agents = $.AgentSet$fromAgent(t2);
    t1.curr = t1.program;
    t1.ip = 0;
    $.JSArray_methods.clear$0(t1.stack);
    for (; t1 = this.interp, t1.step$0(t1);)
      ;
  },
  Agent$1: function(model) {
    this.id = this.model.nextAgentId$0();
    this.interp = $.Interpreter$(this);
  }
},

AgentSet: {"": "Object;agents<,_liblib2$_index,rand",
  get$length: function(_) {
    return this.agents.length;
  },
  next$0: function() {
    this._liblib2$_index = this._liblib2$_index + 1;
    return this.curr$0();
  },
  get$next: function() {
    return new $.BoundClosure$0(this, "next$0", null);
  },
  curr$0: function() {
    var t1, t2, t3;
    t1 = this._liblib2$_index;
    t2 = this.agents;
    t3 = t2.length;
    if (t1 >= t3)
      return;
    else {
      if (t1 < 0)
        throw $.ioore(t1);
      return t2[t1];
    }
  },
  get$curr: function() {
    return new $.BoundClosure$0(this, "curr$0", null);
  },
  get$hasNext: function() {
    return this._liblib2$_index < this.agents.length - 1;
  },
  add$1: function(_, agent) {
    this.agents.push(agent);
  },
  clear$0: function(_) {
    $.JSArray_methods.set$length(this.agents, 0);
    this._liblib2$_index = 0;
  },
  AgentSet$fromAgent$1: function(a) {
    if (a != null)
      this.agents.push(a);
  }
},

Color: {"": "Object;r,g,b,a",
  clone$0: function(_) {
    return $.Color$(this.r, this.g, this.b, this.a);
  },
  setColor$4: function(r, g, b, a) {
    this.r = r;
    this.g = g;
    this.b = b;
    this.a = a;
  },
  get$red: function() {
    return this.r;
  },
  set$red: function(r) {
    if (r >= 0)
      this.r = r < 256 ? r : 255;
  },
  get$green: function() {
    return this.g;
  },
  set$green: function(g) {
    if (g >= 0)
      this.g = g < 256 ? g : 255;
  },
  get$blue: function() {
    return this.b;
  },
  set$blue: function(b) {
    if (b >= 0)
      this.b = b < 256 ? b : 255;
  },
  get$alpha: function(_) {
    return this.a;
  },
  set$alpha: function(_, a) {
    if (a >= 0)
      this.a = a < 256 ? a : 255;
  },
  toString$0: function(_) {
    var t1 = this.a;
    if (typeof t1 !== "number")
      throw t1.$div();
    return "rgba(" + $.S(this.r) + ", " + $.S(this.g) + ", " + $.S(this.b) + ", " + $.S(t1 / 255) + ")";
  }
},

Expression: {"": "Object;"},

Atom: {"": "Expression;value",
  eval$1: function(interp) {
    return this.value;
  }
},

Variable: {"": "Expression;name>",
  eval$1: function(interp) {
    return interp.getVariable$1(this.name);
  }
},

Block: {"": "Expression;list",
  $index: function(_, i) {
    var t1;
    if (typeof i !== "number")
      return this.$$index$bailout(1, i);
    if (i < 0 || i >= this.list.length)
      return;
    else {
      t1 = this.list;
      if (i >>> 0 !== i || i >= t1.length)
        throw $.ioore(i);
      return t1[i];
    }
  },
  $$index$bailout: function(state0, i) {
    var t1 = $.getInterceptor$n(i);
    if (t1.$lt(i, 0) || t1.$ge(i, this.list.length))
      return;
    else {
      t1 = this.list;
      if (i >>> 0 !== i || i >= t1.length)
        throw $.ioore(i);
      return t1[i];
    }
  },
  eval$1: function(interp) {
    return this.list;
  },
  Block$1: function(l) {
    var t1, i;
    if (typeof l !== "string" && (typeof l !== "object" || l === null || l.constructor !== Array && !$.isJsIndexable(l, l[$.dispatchPropertyName])))
      return this.Block$1$bailout(1, l);
    for (t1 = this.list, i = 0; i < l.length; ++i)
      t1.push($.Expression_Expression(l[i]));
  },
  Block$1$bailout: function(state0, l) {
    var t1, t2, i, t3;
    t1 = $.getInterceptor$asx(l);
    t2 = this.list;
    i = 0;
    while (true) {
      t3 = t1.get$length(l);
      if (typeof t3 !== "number")
        throw $.iae(t3);
      if (!(i < t3))
        break;
      t2.push($.Expression_Expression(t1.$index(l, i)));
      ++i;
    }
  },
  $isBlock: true
},

Statement: {"": "Expression;name>,args",
  eval$1: function(interp) {
    var values, t1, i;
    values = $.List_List(null);
    for (t1 = this.args, i = 0; i < t1.length; ++i)
      values.push(t1[i].eval$1(interp));
    return interp.invoke$2(this.name, values);
  },
  Statement$1: function(l) {
    var t1, i;
    if (typeof l !== "string" && (typeof l !== "object" || l === null || l.constructor !== Array && !$.isJsIndexable(l, l[$.dispatchPropertyName])))
      return this.Statement$1$bailout(1, l);
    if (0 >= l.length)
      throw $.ioore(0);
    this.name = l[0];
    for (t1 = this.args, i = 1; i < l.length; ++i)
      t1.push($.Expression_Expression(l[i]));
  },
  Statement$1$bailout: function(state0, l) {
    var t1, t2, i, t3;
    t1 = $.getInterceptor$asx(l);
    this.name = t1.$index(l, 0);
    t2 = this.args;
    i = 1;
    while (true) {
      t3 = t1.get$length(l);
      if (typeof t3 !== "number")
        throw $.iae(t3);
      if (!(i < t3))
        break;
      t2.push($.Expression_Expression(t1.$index(l, i)));
      ++i;
    }
  }
},

SetStatement: {"": "Statement;lhs,rhs,name,args",
  eval$1: function(interp) {
    if (0 >= this.args.length)
      throw $.ioore(0);
    interp.setVariable$2($.get$name$x(this.lhs), this.rhs.eval$1(interp));
  },
  SetStatement$1: function(l) {
    var t1 = this.args;
    if (0 >= t1.length)
      throw $.ioore(0);
    this.lhs = t1[0];
    if (1 >= t1.length)
      throw $.ioore(1);
    this.rhs = t1[1];
  }
},

ControlStatement: {"": "Statement;"},

IfStatement: {"": "ControlStatement;name,args",
  eval$1: function(interp) {
    var t1 = this.args;
    if (0 >= t1.length)
      throw $.ioore(0);
    if (t1[0].eval$1(interp) === true) {
      if (1 >= t1.length)
        throw $.ioore(1);
      interp.pushFrame$2(t1[1], null);
    }
  }
},

RepeatStatement: {"": "ControlStatement;count,name,args",
  eval$1: function(interp) {
    var t1;
    if (this.count == null) {
      t1 = this.args;
      if (0 >= t1.length)
        throw $.ioore(0);
      this.count = t1[0].eval$1(interp);
    }
    if ($.$gt$n(this.count, 0)) {
      interp.set$ip($.$sub$n(interp.get$ip(), 1));
      t1 = this.args;
      if (1 >= t1.length)
        throw $.ioore(1);
      interp.pushFrame$2(t1[1], null);
      this.count = $.$sub$n(this.count, 1);
    } else
      this.count = null;
  }
},

ForeverStatement: {"": "ControlStatement;name,args",
  eval$1: function(interp) {
    var t1;
    interp.set$ip($.$sub$n(interp.get$ip(), 1));
    t1 = this.args;
    if (0 >= t1.length)
      throw $.ioore(0);
    interp.pushFrame$2(t1[0], null);
  }
},

AskStatement: {"": "Statement;name,args",
  eval$1: function(interp) {
    var t1, aset;
    t1 = this.args;
    if (0 >= t1.length)
      throw $.ioore(0);
    aset = t1[0].eval$1(interp);
    if (aset != null && aset.get$curr() != null) {
      if (1 >= t1.length)
        throw $.ioore(1);
      interp.pushFrame$2(t1[1], aset);
    }
  }
},

Interpreter: {"": "Object;owner,agent,agents<,program,curr<,ip@,stack,commands<,rand",
  curr$0: function() {
    return this.curr.call$0();
  },
  restart$0: function() {
    var t1 = this.owner;
    this.agent = t1;
    this.agents = $.AgentSet$fromAgent(t1);
    this.curr = this.program;
    this.ip = 0;
    $.JSArray_methods.clear$0(this.stack);
  },
  getVariable$1: function($name) {
    var t1, i, t2, a;
    t1 = this.agent;
    if (t1 != null && t1.isDefined$1($name))
      return $.$index$asx(this.agent, $name);
    for (t1 = this.stack, i = t1.length - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw $.ioore(i);
      t2 = t1[i].agents;
      if (t2 != null) {
        a = t2.curr$0();
        if (a != null && a.isDefined$1($name))
          return $.$index$asx(a, $name);
      }
    }
    t1 = this.owner.model;
    if (t1.get$properties().containsKey$1($name)) {
      t1 = t1.get$properties();
      return t1.$index(t1, $name);
    } else
      throw $.wrapException("Undefined variable: " + $name);
  },
  setVariable$2: function($name, value) {
    var t1, i, t2, a;
    t1 = this.agent;
    if (t1 != null && t1.isDefined$1($name)) {
      $.$indexSet$ax(this.agent, $name, value);
      return;
    }
    for (t1 = this.stack, i = t1.length - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw $.ioore(i);
      t2 = t1[i].agents;
      if (t2 != null) {
        a = t2.curr$0();
        if (a != null && a.isDefined$1($name)) {
          $.$indexSet$ax(a, $name, value);
          return;
        }
      }
    }
    t1 = this.owner.model;
    if (t1.get$properties().containsKey$1($name)) {
      t1 = t1.get$properties();
      t1.$indexSet(t1, $name, value);
    } else
      throw $.wrapException("Undefined variable: " + $.S($name));
  },
  step$0: function(_) {
    var t1, t2, s;
    t1 = this.curr;
    if (t1 == null)
      return false;
    else if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isBlock) {
      t2 = this.ip;
      if (typeof t2 !== "number")
        return this.step$0$bailout(1, t2, t1);
      this.ip = t2 + 1;
      s = t1.$index(t1, t2);
      if (s != null)
        s.eval$1(this);
      else
        this.popFrame$0();
    } else {
      t1.eval$1(this);
      this.popFrame$0();
    }
    return true;
  },
  step$0$bailout: function(state0, t2, t1) {
    switch (state0) {
      case 0:
        t1 = this.curr;
      case 1:
        var s;
        if (state0 === 0 && t1 == null)
          return false;
        else
          switch (state0) {
            case 0:
            case 1:
              if (state0 === 1 || state0 === 0 && typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isBlock)
                switch (state0) {
                  case 0:
                    $.propertyTypeCast(t1, "$isBlock");
                    t2 = this.ip;
                  case 1:
                    state0 = 0;
                    this.ip = $.$add$ns(t2, 1);
                    s = t1.$index(t1, t2);
                    if (s != null)
                      s.eval$1(this);
                    else
                      this.popFrame$0();
                }
              else {
                t1.eval$1(this);
                this.popFrame$0();
              }
          }
        return true;
    }
  },
  invoke$2: function(command, args) {
    var t1 = this.commands;
    if (t1.containsKey$1(command))
      return t1.$index(t1, command).call$2(command, args);
    else {
      t1 = this.agent;
      if (t1 != null && t1.get$commands().containsKey$1(command)) {
        t1 = this.agent.get$commands();
        return t1.$index(t1, command).call$2(command, args);
      }
    }
    return;
  },
  pushFrame$2: function(exp, aset) {
    var t1 = aset != null;
    if (t1 && aset.curr$0() == null)
      return;
    this.stack.push($.StackFrame$(this.curr, this.ip, this.agents));
    this.curr = exp;
    this.ip = 0;
    if (t1) {
      this.agents = aset;
      this.agent = this.agents.curr$0();
    }
  },
  popFrame$0: function() {
    var t1 = this.stack;
    if ($.JSArray_methods.get$isEmpty(t1)) {
      this.ip = -1;
      this.curr = null;
    } else if (this.agents.get$hasNext()) {
      this.ip = 0;
      this.agent = this.agents.next$0();
    } else {
      this.ip = $.JSArray_methods.get$last(t1).get$ip();
      this.curr = $.JSArray_methods.get$last(t1).get$exp();
      this.agents = $.JSArray_methods.get$last(t1).get$agents();
      this.agent = this.agents.curr$0();
      if (0 >= t1.length)
        throw $.ioore(0);
      t1.pop();
    }
  },
  _doRandom$2: function(command, args) {
    var t1, t2;
    t1 = $.getInterceptor$asx(args);
    t2 = this.rand;
    if ($.$gt$n(t1.get$length(args), 0)) {
      t2 = t2.nextDouble$0();
      t1 = t1.$index(args, 0);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      return t2 * t1;
    } else
      return t2.nextDouble$0();
  },
  get$_doRandom: function() {
    return new $.BoundClosure$2(this, "_doRandom$2", null);
  },
  _doSubtraction$2: function(command, args) {
    var t1 = $.getInterceptor$asx(args);
    if ($.$eq(t1.get$length(args), 2))
      return $.$sub$n(t1.$index(args, 0), t1.$index(args, 1));
    else if ($.$eq(t1.get$length(args), 1))
      return $.$mul$n(t1.$index(args, 0), -1);
    else
      return 0;
  },
  get$_doSubtraction: function() {
    return new $.BoundClosure$2(this, "_doSubtraction$2", null);
  },
  _doAddition$2: function(command, args) {
    var t1, sum, arg;
    for (t1 = $.get$iterator$ax(args), sum = 0; t1.moveNext$0() === true;) {
      arg = t1.get$current();
      if (typeof arg === "number")
        sum += arg;
    }
    return sum;
  },
  get$_doAddition: function() {
    return new $.BoundClosure$2(this, "_doAddition$2", null);
  },
  _doComp$2: function(command, args) {
    var t1, a, b;
    t1 = $.getInterceptor$asx(args);
    a = t1.$index(args, 0);
    b = t1.$index(args, 1);
    t1 = $.getInterceptor(command);
    if (t1.$eq(command, "<"))
      return $.$lt$n(a, b);
    else if (t1.$eq(command, ">"))
      return $.$gt$n(a, b);
    else if (t1.$eq(command, "<="))
      return $.$le$n(a, b);
    else if (t1.$eq(command, ">="))
      return $.$ge$n(a, b);
    else
      return false;
  },
  get$_doComp: function() {
    return new $.BoundClosure$2(this, "_doComp$2", null);
  },
  Interpreter$1: function(owner) {
    var t1;
    this.agent = this.owner;
    t1 = this.commands;
    t1.$indexSet(t1, "random", this.get$_doRandom());
    t1.$indexSet(t1, "-", this.get$_doSubtraction());
    t1.$indexSet(t1, "+", this.get$_doAddition());
    t1.$indexSet(t1, "<", this.get$_doComp());
    t1.$indexSet(t1, ">", this.get$_doComp());
    t1.$indexSet(t1, "<=", this.get$_doComp());
    t1.$indexSet(t1, ">=", this.get$_doComp());
  }
},

StackFrame: {"": "Object;exp<,ip@,agents<"},

Model: {"": "Object;name>,turtles<,properties<",
  restart$0: function() {
    var t1, plot;
    this.pause$0(this);
    this.ticks = 0;
    this.setup$0();
    this.toolbar.update$0();
    this.draw$0();
    for (t1 = $.JSArray_methods.get$iterator(this.plots); t1.moveNext$0();) {
      plot = t1._current;
      $.clear$0$ax(plot);
      plot.update$1(0);
    }
  },
  tick$0: function() {
    var t1, i, t2, t;
    this.ticks = this.ticks + 1;
    this.toolbar.update$0();
    for (t1 = this.turtles, i = t1.length - 1, t2 = this.deadTurtles; i >= 0; --i) {
      if (i >= t1.length)
        throw $.ioore(i);
      t = t1[i];
      if (t.dead) {
        $.JSArray_methods.removeAt$1(t1, i);
        t2.push(t);
      }
    }
    for (i = 0; i < t1.length; ++i)
      t1[i].tick$0();
    for (t1 = $.ListIterator$(this.patches); t1.moveNext$0();)
      t1._current.tick$0();
    if ($.JSInt_methods.$mod(this.ticks, 10) === 0)
      for (t1 = $.ListIterator$(this.plots); t1.moveNext$0();)
        t1._current.update$1(this.ticks);
  },
  play$1: function(_, speedup) {
    this.play_state = speedup;
    this.toolbar.update$0();
    this._animate$0();
  },
  pause$0: function(_) {
    this.play_state = 0;
    this.toolbar.update$0();
  },
  get$isPaused: function() {
    return this.play_state === 0;
  },
  fastForward$0: function() {
    var t1 = this.play_state;
    if (t1 < 16 && t1 > 0)
      this.play_state = t1 * 2;
    else if (t1 === 0)
      this.play$1(this, 1);
    else
      this.play_state = 1;
  },
  stepForward$0: function() {
    this.pause$0(this);
    this.tick$0();
    this.draw$0();
  },
  _animate$0: function() {
    if (this.play_state !== 0) {
      for (var i = 0; i < this.play_state; ++i)
        this.tick$0();
      this.draw$0();
      $.Timer_Timer($.Duration_30000, this.get$_animate());
    }
  },
  get$_animate: function() {
    return new $.BoundClosure$0(this, "_animate$0", null);
  },
  initPatches$0: function() {
    var j, t1, i, t2, t3, t4;
    this.patches = $.List_List($.$mul$n(this.get$worldWidth(), this.get$worldHeight()));
    j = 0;
    while (true) {
      t1 = $.$add$ns($.$sub$n(this.maxPatchY, this.minPatchY), 1);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      if (!(j < t1))
        break;
      i = 0;
      while (true) {
        t1 = this.maxPatchX;
        t2 = this.minPatchX;
        t3 = $.getInterceptor$n(t1);
        t4 = $.$add$ns(t3.$sub(t1, t2), 1);
        if (typeof t4 !== "number")
          throw $.iae(t4);
        if (!(i < t4))
          break;
        t4 = this.patches;
        t1 = $.$add$ns(t3.$sub(t1, t2), 1);
        if (typeof t1 !== "number")
          throw $.iae(t1);
        t1 = j * t1 + i;
        if (typeof t2 !== "number")
          throw $.iae(t2);
        t3 = this.minPatchY;
        if (typeof t3 !== "number")
          throw $.iae(t3);
        t3 = new $.Patch(i + t2, j + t3, null, this, new $.Color(255, 255, 0, 255), new $.HashMap(0, null, null, null, null), null, false, new $.HashMap(0, null, null, null, null));
        t3.id = t3.model.nextAgentId$0();
        t3.interp = $.Interpreter$(t3);
        t3.color = new $.Color(0, 100, 0, 0);
        t3.dirty = true;
        if (t1 >>> 0 !== t1 || t1 >= t4.length)
          throw $.ioore(t1);
        t4[t1] = t3;
        ++i;
      }
      ++j;
    }
  },
  addPlot$1: function(plot) {
    this.plots.push(plot);
  },
  addTurtle$1: function(t) {
    this.turtles.push(t);
  },
  clearTurtles$0: function() {
    $.JSArray_methods.clear$0(this.turtles);
    $.JSArray_methods.clear$0(this.deadTurtles);
  },
  clearPatches$0: function() {
    $.JSArray_methods.clear$0(this.patches);
  },
  resize$2: function(_, w, h) {
    var t1, hpatches, vpatches;
    t1 = this.patchSize;
    hpatches = $.$tdiv$n(w, t1);
    vpatches = $.$tdiv$n(h, t1);
    this.maxPatchX = $.$tdiv$n(hpatches, 2);
    this.maxPatchY = $.$tdiv$n(vpatches, 2);
    this.minPatchX = $.$add$ns($.$sub$n(this.maxPatchX, hpatches), 1);
    this.minPatchY = $.$add$ns($.$sub$n(this.maxPatchY, vpatches), 1);
    if (this.patches.length > 0) {
      this.clearPatches$0();
      this.initPatches$0();
    }
  },
  draw$0: function() {
    var t1 = this.pctx;
    if (t1 != null)
      this._drawPatches$1(t1);
    this._drawTurtles$1(this.tctx);
  },
  patchAt$2: function(tx, ty) {
    var t1, t2, t3, t4, t5, index;
    t1 = $.JSNumber_methods.toInt$0($.round$0$n(tx));
    t2 = this.minPatchX;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t3 = $.JSNumber_methods.toInt$0($.round$0$n(ty));
    t4 = this.minPatchY;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t5 = this.get$worldWidth();
    if (typeof t5 !== "number")
      throw $.iae(t5);
    index = (t3 - t4) * t5 + (t1 - t2);
    t1 = this.patches;
    t2 = t1.length;
    if (index < t2) {
      if (index >>> 0 !== index || index >= t2)
        throw $.ioore(index);
      return t1[index];
    } else
      return;
  },
  _drawTurtles$1: function(ctx) {
    var t1, t2, t3, t4, turtle;
    t1 = $.getInterceptor$x(ctx);
    t1.clearRect$4(ctx, 0, 0, this.width, this.height);
    t2 = this.minPatchX;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t3 = this.patchSize;
    t4 = this.minPatchY;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t1.save$0(ctx);
    t1.translate$2(ctx, (0.5 - t2) * t3, (0.5 - t4) * t3);
    t1.scale$2(ctx, t3, -t3);
    for (t2 = $.JSArray_methods.get$iterator(this.turtles); t2.moveNext$0();) {
      turtle = t2._current;
      t1.save$0(ctx);
      t3 = $.getInterceptor$x(turtle);
      t1.translate$2(ctx, t3.get$x(turtle), t3.get$y(turtle));
      t1.rotate$1(ctx, turtle.get$heading());
      turtle.draw$1(ctx);
      t1.restore$0(ctx);
    }
    t1.restore$0(ctx);
  },
  _drawPatches$1: function(ctx) {
    var t1, t2, t3, t4;
    t1 = this.minPatchX;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    t2 = this.patchSize;
    t3 = this.minPatchY;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t4 = $.getInterceptor$x(ctx);
    t4.save$0(ctx);
    t4.translate$2(ctx, (0.5 - t1) * t2, (0.5 - t3) * t2);
    t4.scale$2(ctx, t2, -t2);
    for (t1 = $.JSArray_methods.get$iterator(this.patches); t1.moveNext$0();)
      t1._current.draw$1(ctx);
    t4.restore$0(ctx);
  },
  nextAgentId$0: function() {
    var t1 = this.AGENT_ID;
    this.AGENT_ID = t1 + 1;
    return t1;
  },
  get$minWorldY: function() {
    var t1 = this.minPatchY;
    if (typeof t1 !== "number")
      return this.get$minWorldY$bailout(1, t1);
    return t1 - 0.5;
  },
  get$minWorldY$bailout: function(state0, t1) {
    return $.$sub$n(t1, 0.5);
  },
  get$minWorldX: function() {
    var t1 = this.minPatchX;
    if (typeof t1 !== "number")
      return this.get$minWorldX$bailout(1, t1);
    return t1 - 0.5;
  },
  get$minWorldX$bailout: function(state0, t1) {
    return $.$sub$n(t1, 0.5);
  },
  get$maxWorldY: function() {
    var t1 = this.maxPatchY;
    if (typeof t1 !== "number")
      return this.get$maxWorldY$bailout(1, t1);
    return t1 + 0.5;
  },
  get$maxWorldY$bailout: function(state0, t1) {
    return $.$add$ns(t1, 0.5);
  },
  get$maxWorldX: function() {
    var t1 = this.maxPatchX;
    if (typeof t1 !== "number")
      return this.get$maxWorldX$bailout(1, t1);
    return t1 + 0.5;
  },
  get$maxWorldX$bailout: function(state0, t1) {
    return $.$add$ns(t1, 0.5);
  },
  get$worldWidth: function() {
    var t1, t2;
    t1 = this.maxPatchX;
    if (typeof t1 !== "number")
      return this.get$worldWidth$bailout(1, t1);
    t2 = this.minPatchX;
    if (typeof t2 !== "number")
      return this.get$worldWidth$bailout(2, t1, t2);
    return t1 - t2 + 1;
  },
  get$worldWidth$bailout: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = this.maxPatchX;
      case 1:
        state0 = 0;
        t2 = this.minPatchX;
      case 2:
        state0 = 0;
        return $.$add$ns($.$sub$n(t1, t2), 1);
    }
  },
  get$worldHeight: function() {
    var t1, t2;
    t1 = this.maxPatchY;
    if (typeof t1 !== "number")
      return this.get$worldHeight$bailout(1, t1);
    t2 = this.minPatchY;
    if (typeof t2 !== "number")
      return this.get$worldHeight$bailout(2, t1, t2);
    return t1 - t2 + 1;
  },
  get$worldHeight$bailout: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = this.maxPatchY;
      case 1:
        state0 = 0;
        t2 = this.minPatchY;
      case 2:
        state0 = 0;
        return $.$add$ns($.$sub$n(t1, t2), 1);
    }
  },
  Model$2: function($name, id) {
    var canvas, t1;
    canvas = $.document().querySelector("#" + this.id + "-turtles");
    t1 = $.getInterceptor$x(canvas);
    this.width = t1.get$width(canvas);
    this.height = t1.get$height(canvas);
    this.tctx = t1.getContext$1(canvas, "2d");
    canvas = $.document().querySelector("#" + this.id + "-patches");
    if (canvas != null)
      this.pctx = $.getContext$1$x(canvas, "2d");
    this.toolbar = $.Toolbar$(this);
    this.resize$2(this, this.width, this.height);
  }
},

Patch: {"": "Agent;x>,y>,id,model,color,_props,interp,dirty,commands",
  draw$1: function(ctx) {
    var t1, t2;
    if (this.dirty) {
      t1 = $.getInterceptor$x(ctx);
      t1.clearRect$4(ctx, this.x - 0.5, this.y - 0.5, 1, 1);
      t2 = this.color;
      t1.set$fillStyle(ctx, t2.toString$0(t2));
      t1.fillRect$4(ctx, this.x - 0.5, this.y - 0.5, 1, 1);
      this.dirty = false;
    }
  }
},

Plot: {"": "Object;id,title,labelX,minX,maxX,minY,maxY,width,height,pens,rows",
  addPen$1: function(pen) {
    this.pens.push(pen);
  },
  clear$0: function(_) {
    $.JSArray_methods.set$length(this.rows, 0);
  },
  update$1: function(tick) {
    var row, t1, container, plot;
    row = $.List_List(null);
    row.push(tick);
    for (t1 = $.ListIterator$(this.pens); t1.moveNext$0();)
      row.push(t1._current.getDataPoint$1(tick));
    this.rows.push(row);
    this.autoScale$1(row);
    container = document.querySelector("#" + this.id);
    this.width = container.clientWidth;
    this.height = container.clientHeight;
    plot = $._SvgSvgElementFactoryProvider_createSvgSvgElement();
    $.set$attributes$x(plot, $.makeLiteralMap(["width", $.S(this.width), "height", $.S(this.height), "version", "1.1"]));
    plot.get$nodes;
    $._ChildNodeListLazy$(plot)._this.appendChild(this._drawWindow$0());
    plot.get$nodes;
    $._ChildNodeListLazy$(plot)._this.appendChild(this._drawXAxis$0());
    plot.get$nodes;
    $._ChildNodeListLazy$(plot)._this.appendChild(this._drawYAxis$0());
    plot.get$nodes;
    $._ChildNodeListLazy$(plot)._this.appendChild(this._drawTitle$0());
    plot.get$nodes;
    $._ChildNodeListLazy$(plot)._this.appendChild(this._drawDataLines$0());
    container.get$nodes;
    $._ChildNodeListLazy$(container)._this.textContent = "";
    container.get$nodes;
    $._ChildNodeListLazy$(container)._this.appendChild(plot);
  },
  autoScale$1: function(row) {
    var t1, i;
    t1 = this.minX;
    if (t1 != null) {
      if (0 >= row.length)
        throw $.ioore(0);
      t1 = $.$gt$n(t1, row[0]);
    } else
      t1 = true;
    if (t1) {
      if (0 >= row.length)
        throw $.ioore(0);
      this.minX = row[0];
    }
    t1 = this.maxX;
    if (t1 == null) {
      if (0 >= row.length)
        throw $.ioore(0);
      this.maxX = $.$add$ns(row[0], 10);
    } else {
      if (0 >= row.length)
        throw $.ioore(0);
      if ($.$lt$n(t1, $.$mul$n(row[0], 1.2)))
        this.maxX = $.$mul$n(this.maxX, 2);
    }
    for (i = 1; i < row.length; ++i) {
      t1 = this.minY;
      if (t1 == null || $.$gt$n(t1, row[i]))
        this.minY = row[i];
      t1 = this.maxY;
      if (t1 == null) {
        if (i >= row.length)
          throw $.ioore(i);
        this.maxY = $.$mul$n(row[i], 1.2);
      } else {
        if (i >= row.length)
          throw $.ioore(i);
        if ($.$lt$n(t1, $.$mul$n(row[i], 1.2))) {
          if (i >= row.length)
            throw $.ioore(i);
          this.maxY = $.$mul$n(row[i], 1.5);
        }
      }
    }
  },
  _drawWindow$0: function() {
    var rect, x, t1, y, t2;
    rect = $.RectElement_RectElement();
    x = this.plotToScreenX$1(this.minX);
    t1 = this.plotToScreenX$1(this.maxX);
    y = this.plotToScreenY$1(this.maxY);
    t2 = this.plotToScreenY$1(this.minY);
    $.set$attributes$x(rect, $.makeLiteralMap(["fill", "white", "fill-opacity", "0.7", "x", $.S(x), "y", $.S(y), "width", $.S(t1 - x), "height", $.S(t2 - y)]));
    return rect;
  },
  _drawDataLines$0: function() {
    var g, t1, t2, p, pen, temp, t3, points, row, t4, x, y;
    g = $.GElement_GElement();
    for (t1 = this.pens, t2 = this.rows, p = 0; p < t1.length;) {
      pen = t1[p];
      temp = document.createElementNS("http://www.w3.org/2000/svg", "polyline");
      $.set$attributes$x(temp, $.makeLiteralMap(["stroke", pen.color, "stroke-width", "2", "fill", "none"]));
      for (t3 = new $.ListIterator(t2, t2.length, 0, null), ++p, points = ""; t3.moveNext$0();) {
        row = t3._current;
        t4 = $.getInterceptor$asx(row);
        x = this.plotToScreenX$1(t4.$index(row, 0));
        y = this.plotToScreenY$1(t4.$index(row, p));
        points = $.JSString_methods.$add(points, $.S(x) + "," + $.S(y) + " ");
      }
      temp.get$attributes;
      new $._ElementAttributeMap(temp)._element.setAttribute("points", points);
      g.get$nodes;
      new $._ChildNodeListLazy(g)._this.appendChild(temp);
    }
    return g;
  },
  _drawTitle$0: function() {
    var t = $.TextElement_TextElement();
    t.textContent = this.title;
    $.set$attributes$x(t, $.makeLiteralMap(["x", $.S(this.plotToScreenX$1(this.minX)), "y", "30", "font-weight", "bold", "text-anchor", "start", "font-size", "12pt"]));
    return t;
  },
  _drawYAxis$0: function() {
    var t1, stepY, labels, i, x1, x2, y1, temp;
    t1 = $.$sub$n(this.maxY, this.minY);
    if (typeof t1 !== "number")
      throw t1.$div();
    stepY = t1 / 4;
    labels = $.GElement_GElement();
    $.set$attributes$x(labels, $.makeLiteralMap(["font-size", "11pt", "text-anchor", "end", "fill", "black"]));
    i = this.minY;
    if (typeof i !== "number")
      return this._drawYAxis$0$bailout(1, i, labels, stepY);
    while (true) {
      t1 = this.maxY;
      if (typeof t1 !== "number")
        throw $.iae(t1);
      if (!(i <= t1))
        break;
      x1 = this.plotToScreenX$1(this.minX);
      x2 = this.plotToScreenX$1(this.maxX);
      y1 = this.plotToScreenY$1(i);
      temp = document.createElementNS("http://www.w3.org/2000/svg", "text");
      temp.textContent = $.S($.JSNumber_methods.toInt$0(i));
      $.set$attributes$x(temp, $.makeLiteralMap(["x", $.S(x1 - 10), "y", $.S(y1 + 5)]));
      labels.get$nodes;
      new $._ChildNodeListLazy(labels)._this.appendChild(temp);
      temp = document.createElementNS("http://www.w3.org/2000/svg", "line");
      $.set$attributes$x(temp, $.makeLiteralMap(["x1", $.S(x1), "y1", $.S(y1), "x2", $.S(x2), "y2", $.S(y1), "stroke", "#999"]));
      labels.get$nodes;
      new $._ChildNodeListLazy(labels)._this.appendChild(temp);
      i += stepY;
    }
    return labels;
  },
  _drawYAxis$0$bailout: function(state0, i, labels, stepY) {
    switch (state0) {
      case 0:
        t1 = $.$sub$n(this.maxY, this.minY);
        if (typeof t1 !== "number")
          throw t1.$div();
        stepY = t1 / 4;
        labels = $.GElement_GElement();
        $.set$attributes$x(labels, $.makeLiteralMap(["font-size", "11pt", "text-anchor", "end", "fill", "black"]));
        i = this.minY;
      case 1:
        var t1, t2, x1, x2, y1, temp;
        state0 = 0;
        while (true) {
          t1 = this.maxY;
          t2 = $.getInterceptor$n(i);
          if (typeof t1 !== "number")
            throw $.iae(t1);
          if (!t2.$le(i, t1))
            break;
          x1 = this.plotToScreenX$1(this.minX);
          x2 = this.plotToScreenX$1(this.maxX);
          y1 = this.plotToScreenY$1(i);
          temp = document.createElementNS("http://www.w3.org/2000/svg", "text");
          temp.textContent = $.S(t2.toInt$0(i));
          $.set$attributes$x(temp, $.makeLiteralMap(["x", $.S(x1 - 10), "y", $.S(y1 + 5)]));
          labels.get$nodes;
          new $._ChildNodeListLazy(labels)._this.appendChild(temp);
          temp = document.createElementNS("http://www.w3.org/2000/svg", "line");
          $.set$attributes$x(temp, $.makeLiteralMap(["x1", $.S(x1), "y1", $.S(y1), "x2", $.S(x2), "y2", $.S(y1), "stroke", "#999"]));
          labels.get$nodes;
          new $._ChildNodeListLazy(labels)._this.appendChild(temp);
          i = t2.$add(i, stepY);
        }
        return labels;
    }
  },
  _drawXAxis$0: function() {
    var t1, stepX, labels, t, t2, i, temp;
    t1 = $.$sub$n(this.maxX, this.minX);
    if (typeof t1 !== "number")
      throw t1.$div();
    stepX = t1 / 4;
    labels = $.GElement_GElement();
    t1 = $.getInterceptor$x(labels);
    t1.set$attributes(labels, $.makeLiteralMap(["font-size", "11pt", "text-anchor", "middle", "fill", "black"]));
    if (this.labelX != null) {
      t = $.TextElement_TextElement();
      t.textContent = this.labelX;
      t2 = $.$add$ns(this.minX, this.maxX);
      if (typeof t2 !== "number")
        throw t2.$div();
      $.set$attributes$x(t, $.makeLiteralMap(["x", $.S(this.plotToScreenX$1(t2 / 2)), "y", $.S(this.plotToScreenY$1(this.minY) + 36), "font-weight", "bold"]));
      t1 = t1.get$nodes(labels);
      t1.add$1(t1, t);
    }
    i = $.$add$ns(this.minX, stepX);
    if (typeof i !== "number")
      return this._drawXAxis$0$bailout(1, i, stepX, labels);
    while (true) {
      t1 = this.maxX;
      if (typeof t1 !== "number")
        throw $.iae(t1);
      if (!(i <= t1))
        break;
      temp = document.createElementNS("http://www.w3.org/2000/svg", "text");
      temp.textContent = $.S($.JSNumber_methods.toInt$0(i));
      $.set$attributes$x(temp, $.makeLiteralMap(["x", $.S(this.plotToScreenX$1(i)), "y", $.S(this.plotToScreenY$1(this.minY) + 15)]));
      labels.get$nodes;
      new $._ChildNodeListLazy(labels)._this.appendChild(temp);
      i += stepX;
    }
    return labels;
  },
  _drawXAxis$0$bailout: function(state0, i, stepX, labels) {
    switch (state0) {
      case 0:
        t1 = $.$sub$n(this.maxX, this.minX);
        if (typeof t1 !== "number")
          throw t1.$div();
        stepX = t1 / 4;
        labels = $.GElement_GElement();
        t1 = $.getInterceptor$x(labels);
        t1.set$attributes(labels, $.makeLiteralMap(["font-size", "11pt", "text-anchor", "middle", "fill", "black"]));
        if (this.labelX != null) {
          t = $.TextElement_TextElement();
          t.textContent = this.labelX;
          t2 = $.$add$ns(this.minX, this.maxX);
          if (typeof t2 !== "number")
            throw t2.$div();
          $.set$attributes$x(t, $.makeLiteralMap(["x", $.S(this.plotToScreenX$1(t2 / 2)), "y", $.S(this.plotToScreenY$1(this.minY) + 36), "font-weight", "bold"]));
          t1 = t1.get$nodes(labels);
          t1.add$1(t1, t);
        }
        i = $.$add$ns(this.minX, stepX);
      case 1:
        var t1, t, t2, temp;
        state0 = 0;
        while (true) {
          t1 = this.maxX;
          t2 = $.getInterceptor$n(i);
          if (typeof t1 !== "number")
            throw $.iae(t1);
          if (!t2.$le(i, t1))
            break;
          temp = document.createElementNS("http://www.w3.org/2000/svg", "text");
          temp.textContent = $.S(t2.toInt$0(i));
          $.set$attributes$x(temp, $.makeLiteralMap(["x", $.S(this.plotToScreenX$1(i)), "y", $.S(this.plotToScreenY$1(this.minY) + 15)]));
          labels.get$nodes;
          new $._ChildNodeListLazy(labels)._this.appendChild(temp);
          i = t2.$add(i, stepX);
        }
        return labels;
    }
  },
  plotToScreenX$1: function(px) {
    var t1, t2, t3;
    if (typeof px !== "number")
      return this.plotToScreenX$1$bailout(1, px);
    t1 = this.width;
    if (t1 == null)
      return this.plotToScreenX$1$bailout(2, px, t1);
    t1 -= 100;
    t2 = this.maxX;
    if (typeof t2 !== "number")
      return this.plotToScreenX$1$bailout(3, px, t1, t2);
    t3 = this.minX;
    if (typeof t3 !== "number")
      return this.plotToScreenX$1$bailout(4, px, t1, t2, t3);
    return $.JSNumber_methods.toInt$0((px - t3) * (t1 / (t2 - t3))) + 50.5;
  },
  plotToScreenX$1$bailout: function(state0, px, t1, t2, t3) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.width;
      case 2:
        state0 = 0;
        if (t1 == null)
          throw t1.$sub();
        t1 -= 100;
        t2 = this.maxX;
      case 3:
        state0 = 0;
        t3 = this.minX;
      case 4:
        state0 = 0;
        t2 = $.$sub$n(t2, t3);
        if (typeof t2 !== "number")
          throw $.iae(t2);
        return $.toInt$0$n($.$mul$n($.$sub$n(px, t3), t1 / t2)) + 50.5;
    }
  },
  plotToScreenY$1: function(py) {
    var t1, t2, t3, t4;
    if (typeof py !== "number")
      return this.plotToScreenY$1$bailout(1, py);
    t1 = this.height;
    if (t1 == null)
      return this.plotToScreenY$1$bailout(2, py, t1);
    t2 = t1 - 100;
    t3 = this.maxY;
    if (typeof t3 !== "number")
      return this.plotToScreenY$1$bailout(3, py, t1, t3, t2);
    t4 = this.minY;
    if (typeof t4 !== "number")
      return this.plotToScreenY$1$bailout(4, py, t1, t3, t2, t4);
    return t1 - 50.5 - $.JSNumber_methods.toInt$0((py - t4) * (t2 / (t3 - t4)));
  },
  plotToScreenY$1$bailout: function(state0, py, t1, t3, t2, t4) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.height;
      case 2:
        state0 = 0;
        if (t1 == null)
          throw t1.$sub();
        t2 = t1 - 100;
        t3 = this.maxY;
      case 3:
        state0 = 0;
        t4 = this.minY;
      case 4:
        state0 = 0;
        t3 = $.$sub$n(t3, t4);
        if (typeof t3 !== "number")
          throw $.iae(t3);
        return t1 - 50.5 - $.toInt$0$n($.$mul$n($.$sub$n(py, t4), t2 / t3));
    }
  }
},

Pen: {"": "Object;color>,name>,updater",
  updater$1: function(arg0) {
    return this.updater.call$1(arg0);
  },
  getDataPoint$1: function(tick) {
    if (this.updater != null)
      return this.updater$1(tick);
    else
      return 0;
  }
},

Toolbar: {"": "Object;model>,id",
  playPause$0: function() {
    var t1 = this.model;
    if (t1.get$isPaused())
      t1.play$1(t1, 1);
    else
      t1.pause$0(t1);
  },
  update$0: function() {
    var el, button, paused, t1;
    el = $.document().querySelector(this.id + " #tick-count");
    if (el != null)
      $.set$innerHtml$x(el, "tick: " + this.model.ticks);
    button = $.document().querySelector(this.id + " #play-button");
    if (button != null) {
      paused = $.contains$1$asx($.get$backgroundImage$x(button.style), "images/play.png");
      t1 = this.model;
      if (t1.get$isPaused() && paused !== true)
        $.set$backgroundImage$x(button.style, "url('../images/play.png')");
      else if (!t1.get$isPaused() && paused === true)
        $.set$backgroundImage$x(button.style, "url('../images/pause.png')");
    }
  },
  Toolbar$1: function(model) {
    var button;
    this.id = "div#" + this.model.id + "-toolbar";
    button = $.document().querySelector(this.id + " #play-button");
    if (button != null)
      $.get$onClick$x(button).listen$1(new $.Toolbar_closure(this));
    button = $.document().querySelector(this.id + " #fastforward-button");
    if (button != null)
      $.get$onClick$x(button).listen$1(new $.Toolbar_closure0(this));
    button = $.document().querySelector(this.id + " #stepforward-button");
    if (button != null)
      $.get$onClick$x(button).listen$1(new $.Toolbar_closure1(this));
    button = $.document().querySelector(this.id + " #restart-button");
    if (button != null)
      $.get$onClick$x(button).listen$1(new $.Toolbar_closure2(this));
  }
},

Toolbar_closure: {"": "Closure;this_0",
  call$1: function(evt) {
    return this.this_0.playPause$0();
  }
},

Toolbar_closure0: {"": "Closure;this_1",
  call$1: function(evt) {
    return $.get$model$x(this.this_1).fastForward$0();
  }
},

Toolbar_closure1: {"": "Closure;this_2",
  call$1: function(evt) {
    return $.get$model$x(this.this_2).stepForward$0();
  }
},

Toolbar_closure2: {"": "Closure;this_3",
  call$1: function(evt) {
    return $.get$model$x(this.this_3).restart$0();
  }
},

Turtle: {"": "Agent;x>,y>,size,heading<,wrap,dead,breed,id,model,color,_props,interp,dirty,commands",
  clone$0: function(_) {
    var t, t1, key;
    t = $.Turtle$(this.model);
    t.x = this.x;
    t.y = this.y;
    t.size = this.size;
    t.heading = this.heading;
    t1 = this.color;
    t.color = t1.clone$0(t1);
    t.dead = false;
    t.breed = this.breed;
    t.setBehavior$1(this.interp.program);
    for (t1 = this._props.get$keys(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
      key = t1._liblib1$_current;
      t.$indexSet(t, key, this.$index(this, key));
    }
    return t;
  },
  forward$1: function(distance) {
    var t1, t2;
    t1 = this.x;
    t2 = this.heading;
    if (this.wrap) {
      t2 = $.sin(t2);
      if (typeof distance !== "number")
        throw $.iae(distance);
      this.x = this.wrapX$1($.$sub$n(t1, t2 * distance));
      this.y = this.wrapY$1($.$add$ns(this.y, $.cos(this.heading) * distance));
    } else {
      t2 = $.sin(t2);
      if (typeof distance !== "number")
        throw $.iae(distance);
      this.x = $.$sub$n(t1, t2 * distance);
      this.y = $.$add$ns(this.y, $.cos(this.heading) * distance);
    }
  },
  left$1: function(_, degrees) {
    var t1 = this.heading;
    if (typeof degrees !== "number")
      throw degrees.$div();
    this.heading = t1 + degrees / 180 * 3.141592653589793;
  },
  right$1: function(_, degrees) {
    if (typeof degrees !== "number")
      throw degrees.$negate();
    this.left$1(this, -degrees);
  },
  die$0: function() {
    this.dead = true;
  },
  hatch$0: function() {
    var copy = this.clone$0(this);
    this.model.addTurtle$1(copy);
    return copy;
  },
  wrapX$1: function(tx) {
    var t1, t2;
    if (typeof tx !== "number")
      return this.wrapX$1$bailout(1, tx);
    t1 = this.model;
    while (true) {
      t2 = t1.get$minWorldX();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(tx < t2))
        break;
      t2 = t1.get$worldWidth();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      tx += t2;
    }
    while (true) {
      t2 = t1.get$maxWorldX();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(tx > t2))
        break;
      t2 = t1.get$worldWidth();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      tx -= t2;
    }
    return tx;
  },
  wrapX$1$bailout: function(state0, tx) {
    var t1, t2, t3;
    t1 = this.model;
    while (true) {
      t2 = t1.get$minWorldX();
      t3 = $.getInterceptor$n(tx);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!t3.$lt(tx, t2))
        break;
      t2 = t1.get$worldWidth();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      tx = t3.$add(tx, t2);
    }
    while (true) {
      t2 = t1.get$maxWorldX();
      t3 = $.getInterceptor$n(tx);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!t3.$gt(tx, t2))
        break;
      t2 = t1.get$worldWidth();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      tx = t3.$sub(tx, t2);
    }
    return tx;
  },
  wrapY$1: function(ty) {
    var t1, t2;
    if (typeof ty !== "number")
      return this.wrapY$1$bailout(1, ty);
    t1 = this.model;
    while (true) {
      t2 = t1.get$minWorldY();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(ty < t2))
        break;
      t2 = t1.get$worldHeight();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      ty += t2;
    }
    while (true) {
      t2 = t1.get$maxWorldY();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(ty > t2))
        break;
      t2 = t1.get$worldHeight();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      ty -= t2;
    }
    return ty;
  },
  wrapY$1$bailout: function(state0, ty) {
    var t1, t2, t3;
    t1 = this.model;
    while (true) {
      t2 = t1.get$minWorldY();
      t3 = $.getInterceptor$n(ty);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!t3.$lt(ty, t2))
        break;
      t2 = t1.get$worldHeight();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      ty = t3.$add(ty, t2);
    }
    while (true) {
      t2 = t1.get$maxWorldY();
      t3 = $.getInterceptor$n(ty);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!t3.$gt(ty, t2))
        break;
      t2 = t1.get$worldHeight();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      ty = t3.$sub(ty, t2);
    }
    return ty;
  },
  draw$1: function(ctx) {
    var t1, t2;
    this.roundRect$6(ctx, -0.2, -0.5, 0.4, 1, 0.2);
    t1 = this.color;
    t2 = $.getInterceptor$x(ctx);
    t2.set$fillStyle(ctx, t1.toString$0(t1));
    t2.fill$0(ctx);
    t2.set$strokeStyle(ctx, "rgba(255, 255, 255, 0.5)");
    t2.set$lineWidth(ctx, 0.05);
    t2.stroke$0(ctx);
  },
  patchHere$0: function() {
    return this.model.patchAt$2(this.x, this.y);
  },
  roundRect$6: function(ctx, x, y, w, h, r) {
    var t1, t2, t3, t4;
    t1 = $.getInterceptor$x(ctx);
    t1.beginPath$0(ctx);
    t2 = x + r;
    t1.moveTo$2(ctx, t2, y);
    t3 = x + w;
    t1.arcTo$5(ctx, t3, y, t3, y + r, r);
    t4 = y + h;
    t1.arcTo$5(ctx, t3, t4, t3 - r, t4, r);
    t1.arcTo$5(ctx, x, t4, x, t4 - r, r);
    t1.arcTo$5(ctx, x, y, t2, y, r);
  },
  _doForward$2: function(command, args) {
    var t1 = $.getInterceptor$asx(args);
    if ($.$gt$n(t1.get$length(args), 0))
      this.forward$1(t1.$index(args, 0));
  },
  get$_doForward: function() {
    return new $.BoundClosure$2(this, "_doForward$2", null);
  },
  _doRight$2: function(command, args) {
    var t1 = $.getInterceptor$asx(args);
    if ($.$gt$n(t1.get$length(args), 0))
      this.right$1(this, t1.$index(args, 0));
  },
  get$_doRight: function() {
    return new $.BoundClosure$2(this, "_doRight$2", null);
  },
  _doLeft$2: function(command, args) {
    var t1 = $.getInterceptor$asx(args);
    if ($.$gt$n(t1.get$length(args), 0))
      this.left$1(this, t1.$index(args, 0));
  },
  get$_doLeft: function() {
    return new $.BoundClosure$2(this, "_doLeft$2", null);
  },
  _doDie$2: function(command, args) {
    this.die$0();
  },
  get$_doDie: function() {
    return new $.BoundClosure$2(this, "_doDie$2", null);
  },
  _doHatch$2: function(command, args) {
    this.hatch$0();
  },
  get$_doHatch: function() {
    return new $.BoundClosure$2(this, "_doHatch$2", null);
  },
  _doPatchHere$2: function(command, args) {
    return $.AgentSet$fromAgent(this.patchHere$0());
  },
  get$_doPatchHere: function() {
    return new $.BoundClosure$2(this, "_doPatchHere$2", null);
  },
  Turtle$1: function(model) {
    var t1;
    this.heading = $.get$Turtle_rnd().nextDouble$0() * 3.141592653589793 * 2;
    this.color = $.Color$(255, 255, 0, 50);
    t1 = this.commands;
    t1.$indexSet(t1, "forward", this.get$_doForward());
    t1.$indexSet(t1, "right", this.get$_doRight());
    t1.$indexSet(t1, "left", this.get$_doLeft());
    t1.$indexSet(t1, "die", this.get$_doDie());
    t1.$indexSet(t1, "hatch", this.get$_doHatch());
    t1.$indexSet(t1, "patch-here", this.get$_doPatchHere());
  }
},

AgentSet$fromAgent: function(a) {
  var t1 = new $.AgentSet($.List_List(null), 0, $.Random_Random(null));
  t1.AgentSet$fromAgent$1(a);
  return t1;
},

Color$: function(r, g, b, a) {
  return new $.Color(r, g, b, a);
},

Expression_Expression: function(exp) {
  var t1, t2;
  if (exp == null)
    return;
  else if (typeof exp === "string")
    return new $.Variable(exp);
  else if (typeof exp !== "object" || exp === null || exp.constructor !== Array && !$.getInterceptor(exp).$isList)
    return new $.Atom(exp);
  else if (typeof exp !== "string" && (typeof exp !== "object" || exp === null || exp.constructor !== Array && !$.isJsIndexable(exp, exp[$.dispatchPropertyName])))
    return $.Expression_Expression$bailout(1, exp);
  t1 = $.getInterceptor(exp);
  t2 = exp.length;
  if (t2 === 0)
    return $.Block$(exp);
  else {
    if (0 >= t2)
      throw $.ioore(0);
    t2 = exp[0];
    if (typeof t2 !== "string")
      return $.Expression_Expression$bailout(2, exp, t1, t2);
    if (t2 === "set") {
      t1 = new $.SetStatement(null, null, null, $.List_List(null));
      t1.Statement$1(exp);
      t1.SetStatement$1(exp);
      return t1;
    } else if (t2 === "if") {
      t1 = new $.IfStatement(null, $.List_List(null));
      t1.Statement$1(exp);
      return t1;
    } else if (t2 === "ask") {
      t1 = new $.AskStatement(null, $.List_List(null));
      t1.Statement$1(exp);
      return t1;
    } else if (t2 === "repeat") {
      t1 = new $.RepeatStatement(null, null, $.List_List(null));
      t1.Statement$1(exp);
      return t1;
    } else if (t2 === "forever") {
      t1 = new $.ForeverStatement(null, $.List_List(null));
      t1.Statement$1(exp);
      return t1;
    } else
      return $.Statement$(exp);
  }
},

Expression_Expression$bailout: function(state0, exp, t1, t2) {
  switch (state0) {
    case 0:
    case 1:
      if (state0 === 0 && exp == null)
        return;
      else
        switch (state0) {
          case 0:
          case 1:
            if (state0 === 0 && typeof exp === "string")
              return new $.Variable(exp);
            else
              switch (state0) {
                case 0:
                case 1:
                  if (state0 === 0 && (typeof exp !== "object" || exp === null || exp.constructor !== Array && !$.getInterceptor(exp).$isList))
                    return new $.Atom(exp);
                  else
                    switch (state0) {
                      case 0:
                      case 1:
                        state0 = 0;
                    }
              }
        }
      t1 = $.getInterceptor$asx(exp);
    default:
      if (state0 === 0 && $.$eq(t1.get$length(exp), 0))
        return $.Block$(exp);
      else
        switch (state0) {
          case 0:
            t2 = t1.$index(exp, 0);
          case 2:
            state0 = 0;
          default:
            if (state0 === 0 && $.$eq(t2, "set")) {
              t1 = new $.SetStatement(null, null, null, $.List_List(null));
              t1.Statement$1(exp);
              t1.SetStatement$1(exp);
              return t1;
            } else
              switch (state0) {
                case 0:
                  t2 = t1.$index(exp, 0);
                case 3:
                  state0 = 0;
                default:
                  if (state0 === 0 && $.$eq(t2, "if")) {
                    t1 = new $.IfStatement(null, $.List_List(null));
                    t1.Statement$1(exp);
                    return t1;
                  } else
                    switch (state0) {
                      case 0:
                        t2 = t1.$index(exp, 0);
                      case 4:
                        state0 = 0;
                      default:
                        if (state0 === 0 && $.$eq(t2, "ask")) {
                          t1 = new $.AskStatement(null, $.List_List(null));
                          t1.Statement$1(exp);
                          return t1;
                        } else
                          switch (state0) {
                            case 0:
                              t2 = t1.$index(exp, 0);
                            case 5:
                              state0 = 0;
                            case 6:
                              if (state0 === 0 && $.$eq(t2, "repeat")) {
                                t1 = new $.RepeatStatement(null, null, $.List_List(null));
                                t1.Statement$1(exp);
                                return t1;
                              } else
                                switch (state0) {
                                  case 0:
                                    t2 = t1.$index(exp, 0);
                                  case 6:
                                    state0 = 0;
                                    if ($.$eq(t2, "forever")) {
                                      t1 = new $.ForeverStatement(null, $.List_List(null));
                                      t1.Statement$1(exp);
                                      return t1;
                                    } else {
                                      t1 = t1.$index(exp, 0);
                                      if (typeof t1 === "string")
                                        return $.Statement$(exp);
                                      else
                                        return $.Block$(exp);
                                    }
                                }
                          }
                    }
              }
        }
  }
},

Block$: function(l) {
  var t1 = new $.Block($.List_List(null));
  t1.Block$1(l);
  return t1;
},

Statement$: function(l) {
  var t1 = new $.Statement(null, $.List_List(null));
  t1.Statement$1(l);
  return t1;
},

Interpreter$: function(owner) {
  var t1 = new $.Interpreter(owner, null, null, null, null, 0, $.List_List(null), $.Map_Map(), $.Random_Random(null));
  t1.Interpreter$1(owner);
  return t1;
},

StackFrame$: function(exp, ip, agents) {
  return new $.StackFrame(exp, ip, agents);
},

Plot$: function(id) {
  return new $.Plot(id, "", null, null, null, null, null, 200, 200, $.List_List(null), $.List_List(null));
},

Pen$: function($name, color) {
  return new $.Pen(color, $name, null);
},

Toolbar$: function(model) {
  var t1 = new $.Toolbar(model, null);
  t1.Toolbar$1(model);
  return t1;
},

Turtle$: function(model) {
  var t1 = new $.Turtle(0, 0, 1, 0, true, false, "turtle", null, model, $.Color$(255, 255, 0, 255), $.Map_Map(), null, false, $.Map_Map());
  t1.Agent$1(model);
  t1.Turtle$1(model);
  return t1;
}}],
["_interceptors", "dart:_interceptors", , {
Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return $.Primitives_objectToString(receiver);
  }
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
},

JSUnknown: {"": "Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return 0;
  }
},

JSArray: {"": "List/Interceptor;",
  checkMutable$1: function(receiver, reason) {
    if (!!receiver.immutable$list)
      throw $.wrapException($.UnsupportedError$(reason));
  },
  checkGrowable$1: function(receiver, reason) {
    if (!!receiver.fixed$length)
      throw $.wrapException($.UnsupportedError$(reason));
  },
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("add"));
    receiver.push(value);
  },
  removeAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw $.wrapException(new $.RangeError("value " + index));
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("removeAt"));
    return receiver.splice(index, 1)[0];
  },
  removeLast$0: function(receiver) {
    this.checkGrowable$1(receiver, "removeLast");
    if (receiver.length === 0)
      throw $.wrapException($.RangeError$value(-1));
    return receiver.pop();
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    $.checkNull(start);
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw $.wrapException($.ArgumentError$(start));
    if (start < 0 || start > receiver.length)
      throw $.wrapException($.RangeError$range(start, 0, receiver.length));
    if (end < start || end > receiver.length)
      throw $.wrapException($.RangeError$range(end, start, receiver.length));
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return receiver[t1 - 1];
    throw $.wrapException($.StateError$("No elements"));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    this.checkMutable$1(receiver, "set range");
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return $.ToString_iterableToString(receiver);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, receiver.length, 0, null);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw $.wrapException(new $.ArgumentError(newLength));
    if (newLength < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(newLength)));
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("set length"));
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      $.throwExpression($.UnsupportedError$("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    receiver[index] = value;
  },
  $isList: true,
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isIterable: true
},

JSMutableArray: {"": "JSArray;", $isJSMutableArray: true, $asJSArray: function () { return [null]; }, $asList: function () { return [null]; }, $asIterable: function () { return [null]; }},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;", $isJSExtendableArray: true},

JSNumber: {"": "num/Interceptor;",
  remainder$1: function(receiver, b) {
    $.checkNull(b);
    return receiver % b;
  },
  toInt$0: function(receiver) {
    var truncated;
    if (isNaN(receiver))
      throw $.wrapException(new $.UnsupportedError("NaN"));
    if (receiver == Infinity || receiver == -Infinity)
      throw $.wrapException(new $.UnsupportedError("Infinity"));
    truncated = receiver < 0 ? this.ceilToDouble$0(receiver) : this.floorToDouble$0(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  truncate$0: function(receiver) {
    return this.toInt$0(receiver);
  },
  round$0: function(receiver) {
    return this.toInt$0(this.roundToDouble$0(receiver));
  },
  ceilToDouble$0: function(receiver) {
    return Math.ceil(receiver);
  },
  floorToDouble$0: function(receiver) {
    return Math.floor(receiver);
  },
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return -Math.round(-receiver);
    else
      return Math.round(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver - other;
  },
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    return this.truncate$0(receiver / other);
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver >= other;
  },
  $isnum: true
},

JSInt: {"": "int/JSNumber;", $isdouble: true, $isnum: true, $isint: true},

JSDouble: {"": "double/JSNumber;", $isdouble: true, $isnum: true},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    if (index >= receiver.length)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    return receiver.charCodeAt(index);
  },
  matchAsPrefix$2: function(receiver, string, start) {
    var t1, t2, i, t3;
    if (start < 0 || start > string.length)
      throw $.wrapException(new $.RangeError("value " + $.S(start) + " not in range 0.." + string.length));
    t1 = receiver.length;
    t2 = string.length;
    if (start + t1 > t2)
      return;
    for (i = 0; i < t1; ++i) {
      t3 = start + i;
      if (t3 < 0)
        $.throwExpression(new $.RangeError("value " + $.S(t3)));
      if (t3 >= t2)
        $.throwExpression(new $.RangeError("value " + $.S(t3)));
      t3 = string.charCodeAt(t3);
      if (i >= t1)
        $.throwExpression(new $.RangeError("value " + i));
      if (t3 !== receiver.charCodeAt(i))
        return;
    }
    return new $.StringMatch(start, string, receiver);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    $.checkString(other);
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    $.checkString(to);
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    if (startIndex < 0)
      throw $.wrapException($.RangeError$value(startIndex));
    if (typeof endIndex !== "number")
      throw $.iae(endIndex);
    if (startIndex > endIndex)
      throw $.wrapException($.RangeError$value(startIndex));
    if (endIndex > receiver.length)
      throw $.wrapException($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  indexOf$2: function(receiver, pattern, start) {
    var t1, i;
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw $.wrapException(new $.ArgumentError(start));
    if (start < 0 || start > receiver.length)
      throw $.wrapException(new $.RangeError("value " + $.S(start) + " not in range 0.." + receiver.length));
    return receiver.indexOf(pattern, start);
    for (t1 = receiver.length, i = start; i <= t1; ++i)
      if (this.matchAsPrefix$2(pattern, receiver, i) != null)
        return i;
    return -1;
  },
  contains$2: function(receiver, other, startIndex) {
    $.checkNull(other);
    if (startIndex < 0 || startIndex > receiver.length)
      throw $.wrapException($.RangeError$range(startIndex, 0, receiver.length));
    return $.stringContainsUnchecked(receiver, other, startIndex);
  },
  contains$1: function($receiver, other) {
    return this.contains$2($receiver, other, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var t1, hash, i;
    for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    return receiver[index];
  },
  $isString: true
},

getInterceptor: function(object) {
  return $.getInterceptor(object);
},

getDispatchProperty: function(object) {
  return object[$.dispatchPropertyName];
},

setDispatchProperty: function(object, value) {
  Object.defineProperty(object, $.dispatchPropertyName, {value: value, enumerable: false, writable: true, configurable: true});
},

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

dispatchRecordInterceptor: function(record) {
  return record.i;
},

dispatchRecordProto: function(record) {
  return record.p;
},

dispatchRecordExtension: function(record) {
  return record.e;
},

dispatchRecordIndexability: function(record) {
  return record.x;
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto;
  record = $.getDispatchProperty(object);
  if (record != null) {
    proto = $.dispatchRecordProto(record);
    if (false === proto)
      return $.dispatchRecordInterceptor(record);
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return $.dispatchRecordInterceptor(record);
    if ($.dispatchRecordExtension(record) === objectProto)
      return proto(object, record);
  }
  record = $.lookupDispatchRecord(object);
  if (record == null)
    return $.C_JSUnknown;
  $.setDispatchProperty(Object.getPrototypeOf(object), record);
  return $.getNativeInterceptor(object);
},

initializeDispatchProperty: function(setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  if (typeof rootProperty !== "string")
    return $.initializeDispatchProperty$bailout(1, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor);
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    if (i > 0)
      property = rootProperty + "_" + i;
    else
      property = rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, $.makeDispatchRecord(jsObjectInterceptor, objectProto, null, null));
      return;
    }
  }
},

initializeDispatchProperty$bailout: function(state0, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    property = i > 0 ? rootProperty + "_" + i : rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, $.makeDispatchRecord(jsObjectInterceptor, objectProto, null, null));
      return;
    }
  }
}}],
["_isolate_helper", "dart:_isolate_helper", , {
CloseToken: {"": "Object;", $isCloseToken: true},

JsIsolateSink: {"": "EventSink;_isClosed,_port<",
  add$1: function(_, message) {
    this._port.send$1(message);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isIsolateSink && $.$eq(this._port, other.get$_port());
  },
  get$hashCode: function(_) {
    return $.$add$ns($.get$hashCode$(this._port), 499);
  },
  $isJsIsolateSink: true,
  $asIsolateSink: null,
  $isIsolateSink: true
},

_Manager: {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      if (t2 != null) {
        $.get$IsolateNatives_thisScript();
        t2 = true;
      } else
        t2 = false;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  _Manager$1: function(entry) {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.Map_Map();
    this.managers = $.Map_Map();
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
},

_IsolateContext: {"": "Object;id,ports,isolateStatics",
  eval$1: function(code) {
    var old, result;
    old = $._globalState().currentContext;
    $._globalState().currentContext = this;
    this._setGlobals$0();
    result = null;
    try {
      result = code.call$0();
    } finally {
      $._globalState().currentContext = old;
      if (old != null)
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId))
      throw $.wrapException($.Exception_Exception("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $._globalState().isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    t1 = this.ports;
    if (t1.get$isEmpty(t1)) {
      t1 = $._globalState().isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.ports = $.Map_Map();
    this.isolateStatics = new Isolate();
  }
},

_EventLoop: {"": "Object;events,activeTimerCount",
  enqueue$3: function(isolate, fn, msg) {
    this.events.addLast$1($._IsolateEvent$(isolate, fn, msg));
  },
  dequeue$0: function() {
    var t1 = this.events;
    if (t1.get$isEmpty(t1))
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($._globalState().rootContext != null)
      if ($._globalState().isolates.containsKey$1($._globalState().rootContext.id))
        if ($._globalState().fromCommandLine === true) {
          var t1 = $._globalState().rootContext.ports;
          t1 = t1.get$isEmpty(t1);
        } else
          t1 = false;
      else
        t1 = false;
    else
      t1 = false;
    if (t1)
      throw $.wrapException($.Exception_Exception("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event, t1, t2;
    $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      t1 = $globalState;
      if (t1.isWorker === true) {
        t2 = t1.isolates;
        t2 = t2.get$isEmpty(t2) && t1.topEventLoop.activeTimerCount === 0;
      } else
        t2 = false;
      if (t2) {
        t1 = t1.mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "close"])));
      }
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if ($._globalState().isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        t1 = $._globalState().mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
      }

  }
},

_EventLoop__runHelper_next: {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    $.Timer_run(this);
  }
},

_IsolateEvent: {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
},

_MainManagerStub: {"": "Object;",
  postMessage$1: function(_, msg) {
    self.postMessage(msg);
  }
},

IsolateNatives__processWorkerMessage_closure: {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    $.IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
  }
},

_BaseSendPort: {"": "Object;_isolateId<",
  _checkReplyTo$1: function(replyTo) {
    if (replyTo != null && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_NativeJsSendPort) && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_WorkerSendPort) && true)
      throw $.wrapException($.Exception_Exception("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $.Completer_Completer();
    port = $.ReceivePortImpl$();
    this.send$2(message, port.toSendPort$0());
    port.receive$1(new $._BaseSendPort_call_closure(completer, port));
    return completer.future;
  },
  $isSendPort: true
},

_BaseSendPort_call_closure: {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1 = this.port_1;
    t1.close$0(t1);
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!$.getInterceptor(value).$isException)
      t1.completeError$1(value);
    else
      t1.complete$1(t1, value);
  }
},

_NativeJsSendPort: {"": "_BaseSendPort;_receivePort<,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_closure(this, message, replyTo));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_NativeJsSendPort && $.$eq(this._receivePort, other._receivePort);
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
},

_NativeJsSendPort_send_closure: {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $._globalState().isolates;
    isolate = t4.$index(t4, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_callback() == null)
      return;
    shouldSerialize = $._globalState().currentContext != null && $._globalState().currentContext.id !== t2.get$_isolateId();
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    $._globalState().topEventLoop.enqueue$3(isolate, new $._NativeJsSendPort_send__closure(t1, t2, shouldSerialize), "receive " + $.S(msg));
  }
},

_NativeJsSendPort_send__closure: {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort().get$_callback() != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t2 = this.box_0;
      t1.get$_receivePort()._callback$2(t2.msg_0, t2.reply_1);
    }
  }
},

_WorkerSendPort: {"": "_BaseSendPort;_workerId<,_receivePortId,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_closure(this, message, replyTo));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_WorkerSendPort)
      t1 = $.$eq(this._workerId, other._workerId) && $.$eq(this._isolateId, other._isolateId) && $.$eq(this._receivePortId, other._receivePortId);
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = this._workerId;
    if (typeof t1 !== "number")
      throw t1.$shl();
    t2 = this._isolateId;
    if (typeof t2 !== "number")
      throw t2.$shl();
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return (t1 << 16 ^ t2 << 8 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
},

_WorkerSendPort_send_closure: {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($._globalState().isWorker === true) {
      t1 = $._globalState().mainManager;
      t1.postMessage$1(t1, workerMessage);
    } else {
      t2 = $._globalState().managers;
      manager = t2.$index(t2, t1.get$_workerId());
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  }
},

ReceivePortImpl: {"": "Object;_id<,_callback<",
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  },
  receive$1: function(onMessage) {
    this._callback = onMessage;
  },
  close$0: function(_) {
    this._callback = null;
    $._globalState().currentContext.unregister$1(this._id);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $._globalState().currentContext.id);
  },
  ReceivePortImpl$0: function() {
    var t1 = $._globalState().currentContext;
    t1.register$2(t1, this._id, this);
  }
},

_waitForPendingPorts_closure: {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  }
},

_PendingSendPortFinder: {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1.$indexSet(t1, list, true);
    $.forEach$1$ax(list, new $._PendingSendPortFinder_visitList_closure(this));
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1.$indexSet(t1, map, true);
    $.forEach$1$ax(map.get$values(map), new $._PendingSendPortFinder_visitMap_closure(this));
  },
  visitSendPort$1: function(port) {
  },
  visitIsolateSink$1: function(sink) {
    this.visitSendPort$1(sink._port);
  },
  visitCloseToken$1: function(token) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
},

_PendingSendPortFinder_visitList_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
},

_PendingSendPortFinder_visitMap_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
},

_JsSerializer: {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return this.visitWorkerSendPort$1(x);
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitNativeJsSendPort$1: function(port) {
    return ["sendport", $._globalState().currentManagerId, port._isolateId, port._receivePort.get$_id()];
  },
  visitWorkerSendPort$1: function(port) {
    return ["sendport", port._workerId, port._isolateId, port._receivePortId];
  },
  visitIsolateSink$1: function(sink) {
    var isClosed = sink._isClosed;
    return ["isolateSink", this.visitSendPort$1(sink._port), isClosed];
  },
  visitCloseToken$1: function(token) {
    return ["closeToken"];
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
},

_JsCopier: {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return this.visitWorkerSendPort$1(x);
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitNativeJsSendPort$1: function(port) {
    return $._NativeJsSendPort$(port._receivePort, port._isolateId);
  },
  visitWorkerSendPort$1: function(port) {
    return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
  },
  visitIsolateSink$1: function(sink) {
    var isClosed, result;
    isClosed = sink._isClosed;
    result = $.JsIsolateSink$fromPort(this.visitSendPort$1(sink._port));
    result._isClosed = isClosed;
    return result;
  },
  visitCloseToken$1: function(token) {
    return token;
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
},

_JsDeserializer: {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if ($.$eq(managerId, $._globalState().currentManagerId)) {
      t1 = $._globalState().isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  },
  deserializeIsolateSink$1: function(list) {
    var t1, port, isClosed, result;
    t1 = $.getInterceptor$asx(list);
    port = this.deserializeSendPort$1(t1.$index(list, 1));
    isClosed = t1.$index(list, 2);
    result = $.JsIsolateSink$fromPort(port);
    result._isClosed = isClosed;
    return result;
  },
  deserializeCloseToken$1: function(list) {
    return $.C_CloseToken;
  }
},

_JsVisitedMap: {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    this.tagged.push(object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = $.List_List(null);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  }
},

_MessageTraverserVisitedMap: {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
},

_MessageTraverser: {"": "Object;_visited",
  traverse$1: function(x) {
    var result, t1;
    if ($._MessageTraverser_isPrimitive(x))
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!$.getInterceptor(x).$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isJsIsolateSink)
      return this.visitIsolateSink$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isCloseToken)
      return this.visitCloseToken$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.wrapException("Message serialization: Illegal value " + $.S(x) + " passed");
  }
},

_Copier: {"": "_MessageTraverser;_visited",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.isJsIndexable(list, list[$.dispatchPropertyName])))
      return this.visitList$1$bailout1(1, list);
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    len = list.length;
    copy = $.List_List(len);
    t1 = this._visited;
    t1.$indexSet(t1, list, copy);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      copy[i] = this._dispatch$1(list[i]);
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = $.List_List(len);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    if (typeof len !== "number")
      throw $.iae(len);
    t2 = copy.length;
    i = 0;
    for (; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = $.Map_Map();
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new $._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
},

_Copier_visitMap_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    $.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  }
},

_Serializer: {"": "_MessageTraverser;_nextFreeRefId,_visited",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    return ["map", id, this._serializeList$1($.toList$0$ax(map.get$keys())), this._serializeList$1($.toList$0$ax(map.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var len, result, i;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.isJsIndexable(list, list[$.dispatchPropertyName])))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      result[i] = this._dispatch$1(list[i]);
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list) {
    var t1, len, result, t2, i, t3;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = $.List_List(len);
    if (typeof len !== "number")
      throw $.iae(len);
    t2 = result.length;
    i = 0;
    for (; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  }
},

_Deserializer: {"": "Object;_deserialized",
  deserialize$1: function(x) {
    if ($._Deserializer_isPrimitive(x))
      return x;
    this._deserialized = $.HashMap$();
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    t1 = $.getInterceptor$asx(x);
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      case "isolateSink":
        return this.deserializeIsolateSink$1(x);
      case "closeToken":
        return this.deserializeCloseToken$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !$.isJsIndexable(dartList, dartList[$.dispatchPropertyName]))
      return this._deserializeList$1$bailout(1, dartList, id);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t1, len, i;
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = $.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    if (typeof len !== "number")
      throw $.iae(len);
    i = 0;
    for (; i < len; ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = $.Map_Map();
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !$.isJsIndexable(keys, keys[$.dispatchPropertyName])))
      return this._deserializeMap$1$bailout(1, x, result, keys, t1);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !$.isJsIndexable(values, values[$.dispatchPropertyName])))
      return this._deserializeMap$1$bailout(2, 0, result, keys, 0, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, x, result, keys, t1, values) {
    switch (state0) {
      case 0:
        result = $.Map_Map();
        t1 = $.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        var id, t2, len, i;
        state0 = 0;
        t1 = $.getInterceptor$asx(keys);
        len = t1.get$length(keys);
        if (typeof len !== "number")
          throw $.iae(len);
        t2 = $.getInterceptor$asx(values);
        i = 0;
        for (; i < len; ++i)
          result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw $.wrapException("Unexpected serialized object");
  }
},

TimerImpl: {"": "Object;_once,_inEventLoop,_handle?",
  TimerImpl$2: function(milliseconds, callback) {
    var t1;
    if (milliseconds === 0)
      t1 = !$.hasTimer() || $._globalState().isWorker === true;
    else
      t1 = false;
    if (t1) {
      this._handle = 1;
      $._globalState().topEventLoop.enqueue$3($._globalState().currentContext, new $.TimerImpl_internalCallback(this, callback), "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer()) {
      t1 = $._globalState().topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(new $.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
    } else
      throw $.wrapException($.UnsupportedError$("Timer greater than 0."));
  }
},

TimerImpl_internalCallback: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.this_0.set$_handle(null);
    this.callback_1.call$0();
  }
},

TimerImpl_internalCallback0: {"": "Closure;this_2,callback_3",
  call$0: function() {
    this.this_2.set$_handle(null);
    var t1 = $._globalState().topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
    this.callback_3.call$0();
  }
},

JsIsolateSink$fromPort: function(_port) {
  return new $.JsIsolateSink(false, _port);
},

_callInIsolate: function(isolate, $function) {
  var result = isolate.eval$1($function);
  $._globalState().topEventLoop.run$0();
  return result;
},

_currentIsolate: function() {
  return $._globalState().currentContext;
},

startRootIsolate: function(entry) {
  var rootContext;
  $._globalState0($._Manager$(entry));
  if ($._globalState().isWorker === true)
    return;
  rootContext = $._IsolateContext$();
  $._globalState().rootContext = rootContext;
  $._globalState().currentContext = rootContext;
  rootContext.eval$1(entry);
  $._globalState().topEventLoop.run$0();
},

_globalState: function() {
  return $globalState;
},

_globalState0: function(val) {
  $globalState = val;
},

_Manager$: function(entry) {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
},

_IsolateContext$: function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
},

_EventLoop$: function() {
  return new $._EventLoop($.Queue_Queue(), 0);
},

_IsolateEvent$: function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
},

_MainManagerStub$: function() {
  return new $._MainManagerStub();
},

IsolateNatives_computeThisScript: function() {
  var currentScript, stack, matches;
  currentScript = $.$currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  stack = new Error().stack;
  if (stack == null)
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.wrapException($.UnsupportedError$("Cannot extract URI from \"" + stack + "\""));
},

IsolateNatives_computeGlobalThis: function() {
  return function() { return this; }();
},

IsolateNatives__getEventData: function(e) {
  return e.data;
},

IsolateNatives__processWorkerMessage: function(sender, e) {
  var msg, t1, functionName, entryPoint, replyTo, context, t2;
  msg = $._deserializeMessage($.IsolateNatives__getEventData(e));
  t1 = $.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $._globalState().currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $._globalState().entry : $.IsolateNatives__getJSFunctionFromName(functionName);
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      $._globalState().topEventLoop.enqueue$3(context, new $.IsolateNatives__processWorkerMessage_closure(entryPoint, replyTo), "worker-start");
      $._globalState().currentContext = context;
      $._globalState().topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        t1.$index(msg, "port").send$2(t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $._globalState().topEventLoop.run$0();
      break;
    case "close":
      t1 = $._globalState().managers;
      t2 = $.get$IsolateNatives_workerIds();
      t1.remove$1(t1, t2.$index(t2, sender));
      sender.terminate();
      $._globalState().topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($._globalState().isWorker === true) {
        t1 = $._globalState().mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg])));
      } else
        $.print(t1.$index(msg, "msg"));
      break;
    case "error":
      throw $.wrapException(t1.$index(msg, "msg"));
  }
},

IsolateNatives__log: function(msg) {
  var trace, t1, exception;
  if ($._globalState().isWorker === true) {
    t1 = $._globalState().mainManager;
    t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg])));
  } else
    try {
      $.IsolateNatives__consoleLog(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.wrapException($.Exception_Exception(trace));
    }

},

IsolateNatives__consoleLog: function(msg) {
  $.get$globalThis().console.log(msg);
},

IsolateNatives__getJSFunctionFromName: function(functionName) {
  return $[functionName];
},

IsolateNatives__startIsolate: function(topLevel, replyTo) {
  $.lazyPort = $.ReceivePort_ReceivePort();
  replyTo.send$2("spawned", $.port().toSendPort$0());
  topLevel.call$0();
},

IsolateNatives__spawnWorker: function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { $.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $._globalState();
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $._globalState().managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
},

_NativeJsSendPort$: function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
},

_WorkerSendPort$: function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
},

ReceivePortImpl$: function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
},

_waitForPendingPorts: function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $.Future_wait(finder.ports).then$1(new $._waitForPendingPorts_closure(callback));
},

_PendingSendPortFinder$: function() {
  var t1 = new $._PendingSendPortFinder([], $._MessageTraverserVisitedMap$());
  t1._PendingSendPortFinder$0();
  return t1;
},

_serializeMessage: function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
},

_deserializeMessage: function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
},

_JsSerializer$: function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
},

_JsCopier$: function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
},

_JsDeserializer$: function() {
  return new $._JsDeserializer(null);
},

_JsVisitedMap$: function() {
  return new $._JsVisitedMap(null);
},

_MessageTraverserVisitedMap$: function() {
  return new $._MessageTraverserVisitedMap();
},

_MessageTraverser_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

_Deserializer_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

TimerImpl$: function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
},

hasTimer: function() {
  return $.get$globalThis().setTimeout != null;
}}],
["_js_helper", "dart:_js_helper", , {
DartError: {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper$closure.call$0;
  }
},

_StackTrace: {"": "Object;_stack",
  toString$0: function(_) {
    var t1 = this._stack;
    return t1 != null ? t1 : "";
  }
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
},

BoundClosure: {"": "Closure;_self,_target,_liblib3$_receiver",
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (this === other)
      return true;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isBoundClosure)
      return false;
    return this._self === other._self && this._target === other._target && this._liblib3$_receiver === other._liblib3$_receiver;
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this._self) + $.get$hashCode$(this._target) + $.get$hashCode$(this._liblib3$_receiver) & 0x3ffffff;
  },
  $isBoundClosure: true
},

Creates: {"": "Object;types"},

Returns: {"": "Object;types"},

JSName: {"": "Object;name>"},

Null: {"": "Object;"},

TypeErrorImplementation: {"": "Object;message",
  toString$0: function(_) {
    return this.message;
  }
},

CastErrorImplementation: {"": "Object;message",
  toString$0: function(_) {
    return this.message;
  }
},

FallThroughErrorImplementation: {"": "Object;",
  toString$0: function(_) {
    return "Switch case fall-through.";
  }
},

StringMatch: {"": "Object;start,str,pattern",
  $index: function(_, g) {
    if (typeof g !== "number")
      return this.$$index$bailout(1, g);
    if (g !== 0)
      $.throwExpression($.RangeError$value(g));
    return this.pattern;
  },
  $$index$bailout: function(state0, g) {
    if (!$.$eq(g, 0))
      $.throwExpression($.RangeError$value(g));
    return this.pattern;
  }
},

isJsIndexable: function(object, record) {
  var result;
  if (record != null) {
    result = $.dispatchRecordIndexability(record);
    if (result != null)
      return result;
  }
  return typeof object === "object" && object !== null && !!$.getInterceptor(object).$isJavaScriptIndexingBehavior;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = $.toString$0(value);
  if (typeof res !== "string")
    throw $.wrapException($.ArgumentError$(value));
  return res;
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives_printString: function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
},

Primitives_formatType: function(className, typeArguments) {
  return $.S(className) + $.joinArguments(typeArguments, 0);
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback($.getInterceptor(object));
  if ($.$eq($name, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  if (t1.codeUnitAt$1($name, 0) === 36)
    $name = t1.substring$1($name, 1);
  return $.Primitives_formatType($name, $.getRuntimeTypeInfo(object));
},

Primitives_objectToString: function(object) {
  return "Instance of '" + $.Primitives_objectTypeName(object) + "'";
},

Primitives_newGrowableList: function($length) {
  return new Array($length);
},

Primitives_newFixedList: function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
},

Primitives_getProperty: function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException($.ArgumentError$(object));
  return object[key];
},

Primitives_setProperty: function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException($.ArgumentError$(object));
  object[key] = value;
},

iae: function(argument) {
  throw $.wrapException($.ArgumentError$(argument));
},

ioore: function(index) {
  if (typeof index !== "number" || Math.floor(index) !== index)
    $.iae(index);
  throw $.wrapException($.RangeError$value(index));
},

checkNull: function(object) {
  if (object == null)
    throw $.wrapException($.ArgumentError$(null));
  return object;
},

checkNum: function(value) {
  if (typeof value !== "number")
    throw $.wrapException($.ArgumentError$(value));
  return value;
},

checkString: function(value) {
  return value;
},

wrapException: function(ex) {
  var wrapper = $.DartError$(ex == null ? $.C_NullThrownError : ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.wrapException$closure);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
},

throwExpression: function(ex) {
  throw $.wrapException(ex);
},

DartError$: function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
},

DartError_toStringWrapper: function() {
  return $.toString$0(this);
},

unwrapException: function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if (ex == null)
    return;
  if (typeof ex !== "object")
    return ex;
  if ("dartException" in ex)
    return ex.dartException;
  else if (!("message" in ex))
    return ex;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (!$.contains(message, "JSNull")) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") || t1.$eq(type, "called_non_callable") || t1.$eq(type, "non_object_property_call") || t1.$eq(type, "non_object_property_load");
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$eq(type, "undefined_method"))
      return $.NoSuchMethodError$("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number >> 16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1)
      if (message === "null has no properties" || message === "'null' is not an object" || message === "'undefined' is not an object" || $.JSString_methods.endsWith$1(message, "is null") || $.JSString_methods.endsWith$1(message, "is undefined") || $.JSString_methods.endsWith$1(message, "is null or undefined") || $.JSString_methods.endsWith$1(message, "of undefined") || $.JSString_methods.endsWith$1(message, "of null"))
        return $.NoSuchMethodError$(null, message, [], $.makeLiteralMap([]), null);
      else {
        if (!$.contains(message, " has no method "))
          if (!$.contains(message, " is not a function"))
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", message, [], $.makeLiteralMap([]), null);
      }
    return $.Exception_Exception(t1 ? message : "");
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && $.contains(message, "call stack"))
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
},

getTraceFromException: function(exception) {
  if (exception == null)
    return;
  if (typeof exception !== "object")
    return;
  if ("stack" in exception)
    return $._StackTrace$(exception.stack);
  else
    return;
},

_StackTrace$: function(_stack) {
  return new $._StackTrace(_stack);
},

makeLiteralMap: function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.get$iterator$ax(keyValuePairs);
  result = $.LinkedHashMap$();
  for (; iterator.moveNext$0() === true;) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0))
    return $._callInIsolate(isolate, new $.invokeClosure_closure(closure));
  else if (t1.$eq(numberOfArguments, 1))
    return $._callInIsolate(isolate, new $.invokeClosure_closure0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2))
    return $._callInIsolate(isolate, new $.invokeClosure_closure1(closure, arg1, arg2));
  else
    throw $.wrapException($.Exception_Exception("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($._currentIsolate(), $.invokeClosure$closure.call$5);
  closure.$identity = $function;
  return $function;
},

propertyTypeCastError: function(value, property) {
  var t1 = $.getInterceptor$asx(property);
  throw $.wrapException($.CastErrorImplementation$($.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
},

propertyTypeCast: function(value, property) {
  if (value == null || !!value[property])
    return value;
  $.propertyTypeCastError(value, property);
},

CastErrorImplementation$: function(actualType, expectedType) {
  return new $.CastErrorImplementation("CastError: Casting value of type " + actualType + " to incompatible type " + expectedType);
},

throwCyclicInit: function(staticName) {
  throw $.wrapException($.CyclicInitializationError$("Cyclic initialization for static " + $.S(staticName)));
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

getConstructorName: function(type) {
  return type.builtin$cls;
},

runtimeTypeToString: function(type) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array)
    return $.getConstructorName($.getIndex(type, 0)) + $.joinArguments(type, 1);
  else if (typeof type == "function")
    return type.builtin$cls;
  else
    return;
},

joinArguments: function(types, startIndex) {
  var buffer, index, firstArgument, allDynamic, argument, str;
  if ($.isNull(types))
    return "";
  buffer = $.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    str = $.runtimeTypeToString(argument);
    str = typeof str === "string" ? str : str;
    buffer._contents = buffer._contents + str;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
},

getIndex: function(array, index) {
  return array[index];
},

isNull: function(o) {
  return o == null;
},

typeNameInChrome: function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
},

typeNameInSafari: function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
},

typeNameInWebKitCommon: function(tag) {
  return tag;
},

typeNameInOpera: function(obj) {
  return $.constructorNameFallback(obj);
},

typeNameInFirefox: function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
},

typeNameInIE: function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
},

constructorNameFallback: function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.builtin$cls;
    if ($name != null)
      return $name;
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
},

alternateTag: function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
},

contains: function(userAgent, $name) {
  return userAgent.indexOf($name) !== -1;
},

propertyGet: function(object, property) {
  return object[property];
},

callHasOwnProperty: function($function, object, property) {
  return $function.call(object, property);
},

getFunctionForTypeNameOf: function() {
  if (typeof navigator !== "object")
    return $.typeNameInChrome$closure;
  var userAgent = navigator.userAgent;
  if ($.contains(userAgent, "Chrome") || $.contains(userAgent, "DumpRenderTree"))
    return $.typeNameInChrome$closure;
  else if ($.contains(userAgent, "Firefox"))
    return $.typeNameInFirefox$closure;
  else if ($.contains(userAgent, "MSIE"))
    return $.typeNameInIE$closure;
  else if ($.contains(userAgent, "Opera"))
    return $.typeNameInOpera$closure;
  else if ($.contains(userAgent, "AppleWebKit"))
    return $.typeNameInSafari$closure;
  else
    return $.constructorNameFallback$closure;
},

getTypeNameOf: function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
},

toStringForNativeObject: function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
},

hashCodeForNativeObject: function(object) {
  return $.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

defineNativeMethods: function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, true);
},

defineNativeMethodsNonleaf: function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, false);
},

defineNativeMethodsCommon: function(tags, interceptorClass, isLeaf) {
  var methods, tagsList, i, tag;
  methods = interceptorClass.prototype;
  if ($.interceptorsByTag == null)
    $.interceptorsByTag = {};
  if ($.leafTags == null)
    $.leafTags = {};
  tagsList = tags.split("|");
  for (i = 0; i < tagsList.length; ++i) {
    tag = tagsList[i];
    $.interceptorsByTag[tag] = methods;
    $.leafTags[tag] = isLeaf;
  }
},

defineNativeMethodsFinish: function() {
},

lookupInterceptor: function(hasOwnPropertyFunction, tag) {
  var map = $.interceptorsByTag;
  if (map == null)
    return;
  return $.callHasOwnProperty(hasOwnPropertyFunction, map, tag) ? $.propertyGet(map, tag) : null;
},

lookupDispatchRecord: function(obj) {
  var hasOwnPropertyFunction, tag, interceptor, secondTag, t1;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  tag = $.getTypeNameOf(obj);
  interceptor = $.lookupInterceptor(hasOwnPropertyFunction, tag);
  if (interceptor == null) {
    secondTag = $.alternateTag(obj, tag);
    if (secondTag != null)
      interceptor = $.lookupInterceptor(hasOwnPropertyFunction, secondTag);
  }
  if (interceptor == null)
    return;
  t1 = $.leafTags;
  if (t1 != null && t1[tag] === true)
    return $.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  else
    return $.makeDispatchRecord(interceptor, Object.getPrototypeOf(obj), null, null);
},

stringContainsUnchecked: function(receiver, other, startIndex) {
  return !$.$eq($.JSString_methods.indexOf$2(receiver, other, startIndex), -1);
},

stringReplaceJS: function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace("$", "$$$$"));
},

stringReplaceAllUnchecked: function(receiver, from, to) {
  var result, $length, i, t1;
  $.checkString(to);
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer$("");
      $length = receiver.length;
      result.write$1(to);
      for (i = 0; i < $length; ++i) {
        t1 = receiver[i];
        result._contents = result._contents + t1;
        result._contents = result._contents + to;
      }
      return result.toString$0(result);
    }
  else
    return $.stringReplaceJS(receiver, new RegExp(from.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), to);
}}],
["dart._collection.dev", "dart:_collection-dev", , {
ListIterable: {"": "IterableBase;",
  get$iterator: function(_) {
    return new $.ListIterator(this, this.get$length(this), 0, null);
  },
  $asIterable: null
},

SubListIterable: {"": "ListIterable;_iterable,_start,_endOrLength",
  get$_endIndex: function() {
    var $length = $.get$length$asx(this._iterable);
    if (true)
      return $length;
    return this._endOrLength;
  },
  get$_startIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._start;
    if ($.$gt$n(t1, $length))
      return $length;
    return t1;
  },
  get$length: function(_) {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    if (typeof $length !== "number")
      return this.get$length$bailout2(1, $length);
    t1 = this._start;
    if (typeof t1 !== "number")
      return this.get$length$bailout2(2, $length, t1);
    if (t1 >= $length)
      return 0;
    if (true)
      return $length - t1;
    return $.JSNull_methods.$sub(this._endOrLength, t1);
  },
  get$length$bailout2: function(state0, $length, t1) {
    switch (state0) {
      case 0:
        $length = $.get$length$asx(this._iterable);
      case 1:
        state0 = 0;
        t1 = this._start;
      case 2:
        state0 = 0;
        if ($.$ge$n(t1, $length))
          return 0;
        if (true)
          return $.$sub$n($length, t1);
        return $.JSNull_methods.$sub(this._endOrLength, t1);
    }
  },
  elementAt$1: function(_, index) {
    var t1, realIndex;
    if (typeof index !== "number")
      return this.elementAt$1$bailout2(1, index);
    t1 = this.get$_startIndex();
    if (typeof t1 !== "number")
      return this.elementAt$1$bailout2(2, index, t1);
    realIndex = t1 + index;
    if (!(index < 0)) {
      t1 = this.get$_endIndex();
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t1 = realIndex >= t1;
    } else
      t1 = true;
    if (t1) {
      t1 = this.get$length(this);
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + $.S(t1)));
    }
    return $.elementAt$1$ax(this._iterable, realIndex);
  },
  elementAt$1$bailout2: function(state0, index, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.get$_startIndex();
      case 2:
        var realIndex;
        state0 = 0;
        realIndex = $.$add$ns(t1, index);
        if (!$.$lt$n(index, 0)) {
          t1 = this.get$_endIndex();
          if (typeof t1 !== "number")
            throw $.iae(t1);
          t1 = $.$ge$n(realIndex, t1);
        } else
          t1 = true;
        if (t1) {
          t1 = this.get$length(this);
          throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + $.S(t1)));
        }
        return $.elementAt$1$ax(this._iterable, realIndex);
    }
  },
  $asIterable: null
},

ListIterator: {"": "Object;_iterable,_liblib0$_length,_index,_current",
  get$current: function() {
    return this._current;
  },
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = $.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    if (!$.$eq(this._liblib0$_length, $length))
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    t3 = this._index;
    if (typeof $length !== "number")
      throw $.iae($length);
    if (t3 >= $length) {
      this._current = null;
      return false;
    }
    this._current = t2.elementAt$1(t1, t3);
    this._index = this._index + 1;
    return true;
  }
},

MappedIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1 = this._iterable;
    return new $.MappedIterator(null, t1.get$iterator(t1), this._f);
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  $asIterable: function (S, T) { return [T]; }
},

MappedIterator: {"": "Iterator;_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._current = this._f$1(t1.get$current());
      return true;
    }
    this._current = null;
    return false;
  },
  get$current: function() {
    return this._current;
  }
},

MappedListIterable: {"": "ListIterable;_liblib0$_source,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return $.get$length$asx(this._liblib0$_source);
  },
  elementAt$1: function(_, index) {
    return this._f$1($.elementAt$1$ax(this._liblib0$_source, index));
  },
  $asIterable: function (S, T) { return [T]; }
},

WhereIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    return new $.WhereIterator($.get$iterator$ax(this._iterable), this._f);
  },
  $asIterable: null
},

WhereIterator: {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0() === true;)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  }
},

SkipIterable: {"": "IterableBase;_iterable,_skipCount",
  get$iterator: function(_) {
    var t1, t2, t3;
    t1 = this._iterable;
    t1 = t1.get$iterator(t1);
    t2 = this._skipCount;
    t3 = new $.SkipIterator(t1, t2);
    t3.SkipIterator$2(t1, t2);
    return t3;
  },
  $asIterable: null
},

SkipIterator: {"": "Iterator;_iterator,_skipCount",
  moveNext$0: function() {
    var t1, i, t2;
    t1 = this._iterator;
    i = 0;
    while (true) {
      t2 = this._skipCount;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(i < t2))
        break;
      t1.moveNext$0();
      ++i;
    }
    this._skipCount = 0;
    return t1.moveNext$0();
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  SkipIterator$2: function(_iterator, _skipCount) {
  }
},

ToString__emitPair_closure: {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    t1.write$1(": ");
    $.ToString__emitObject(v, t1, t2);
  }
},

Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3, t4;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !$.isJsIndexable(src, src[$.dispatchPropertyName])))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof srcStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !$.isJsIndexable(dst, dst[$.dispatchPropertyName]))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dstStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof count !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i >>> 0 !== i || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j >>> 0 !== j || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = srcStart + count, t2 = src.length, t3 = dst.length, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
      if (i >>> 0 !== i || i >= t2)
        throw $.ioore(i);
      t4 = src[i];
      if (j >>> 0 !== j || j >= t3)
        throw $.ioore(j);
      dst[j] = t4;
    }
},

Arrays_copy$bailout: function(state0, src, srcStart, dst, dstStart, count) {
  var t1, i, j, t2, t3, t4;
  t1 = $.getInterceptor$n(srcStart);
  if (t1.$lt(srcStart, dstStart))
    for (i = $.$sub$n(t1.$add(srcStart, count), 1), j = $.$sub$n($.$add$ns(dstStart, count), 1), t1 = $.getInterceptor$asx(src), t2 = $.getInterceptor$ax(dst); t3 = $.getInterceptor$n(i), t3.$ge(i, srcStart); i = t3.$sub(i, 1), j = $.$sub$n(j, 1))
      t2.$indexSet(dst, j, t1.$index(src, i));
  else
    for (t2 = $.getInterceptor$asx(src), t3 = $.getInterceptor$ax(dst), j = dstStart, i = srcStart; t4 = $.getInterceptor$n(i), t4.$lt(i, t1.$add(srcStart, count)); i = t4.$add(i, 1), j = $.$add$ns(j, 1))
      t3.$indexSet(dst, j, t2.$index(src, i));
},

ListIterator$: function(iterable) {
  return new $.ListIterator(iterable, $.get$length$asx(iterable), 0, null);
},

MappedIterable$: function(_iterable, _f) {
  return new $.MappedIterable(_iterable, _f);
},

WhereIterable$: function(_iterable, _f) {
  return new $.WhereIterable(_iterable, _f);
},

IterableMixinWorkaround_forEach: function(iterable, f) {
  var t1;
  for (t1 = $.get$iterator$ax(iterable); t1.moveNext$0();)
    f.call$1(t1._current);
},

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  var t1 = $.getInterceptor$n(start);
  if (t1.$lt(start, 0) || t1.$gt(start, list.length))
    throw $.wrapException($.RangeError$range(start, 0, list.length));
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start) || t1.$gt(end, list.length))
    throw $.wrapException($.RangeError$range(end, start, list.length));
},

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length, otherStart, otherList, t1;
  $.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = $.$sub$n(end, start);
  if ($.$eq($length, 0))
    return;
  if (skipCount < 0)
    throw $.wrapException($.ArgumentError$(skipCount));
  otherStart = skipCount;
  otherList = from;
  if (typeof $length !== "number")
    throw $.iae($length);
  t1 = $.get$length$asx(otherList);
  if (typeof t1 !== "number")
    throw $.iae(t1);
  if (otherStart + $length > t1)
    throw $.wrapException($.StateError$("Not enough elements"));
  $.Arrays_copy(otherList, otherStart, list, start, $length);
},

ToString_iterableToString: function(i) {
  var result = $.StringBuffer$("");
  $.ToString__emitValue(i, result, $.List_List(null));
  return result.toString$0(result);
},

ToString__emitValue: function(i, result, visiting) {
  var t1, isList, t2, first, e;
  t1 = $.getInterceptor$ax(visiting);
  t1.add$1(visiting, i);
  isList = typeof i === "object" && i !== null && (i.constructor === Array || !!$.getInterceptor(i).$isList);
  result.write$1(isList ? "[" : "{");
  for (t2 = $.get$iterator$ax(i), first = true; t2.moveNext$0() === true; first = false) {
    e = t2.get$current();
    if (!first)
      result.write$1(", ");
    $.ToString__emitObject(e, result, visiting);
  }
  result.write$1(isList ? "]" : "}");
  t1.removeLast$0(visiting);
},

ToString__emitObject: function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isIterable))
    if ($.ToString__containsRef(visiting, o))
      result.write$1(typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isList) ? "[...]" : "{...}");
    else
      $.ToString__emitValue(o, result, visiting);
  else if (typeof o === "object" && o !== null && !!$.getInterceptor(o).$isMap)
    if ($.ToString__containsRef(visiting, o))
      result.write$1("{...}");
    else
      $.ToString__emitPair(o, result, visiting);
  else
    result.write$1(o);
},

ToString__containsRef: function(i, ref) {
  var t1;
  for (t1 = $.get$iterator$ax(i); t1.moveNext$0() === true;)
    if (t1.get$current() === ref)
      return true;
  return false;
},

ToString_mapToString: function(m) {
  var result = $.StringBuffer$("");
  $.ToString__emitPair(m, result, $.List_List(null));
  return result.toString$0(result);
},

ToString__emitPair: function(m, result, visiting) {
  var t1, t2;
  t1 = {};
  t2 = $.getInterceptor$ax(visiting);
  t2.add$1(visiting, m);
  result.write$1("{");
  t1.first_0 = true;
  m.forEach$1(m, new $.ToString__emitPair_closure(t1, result, visiting));
  result.write$1("}");
  t2.removeLast$0(visiting);
}}],
["dart.async", "dart:async", , {
_Completer: {"": "Object;",
  complete$1: function(_, value) {
    if (this._isComplete)
      throw $.wrapException($.StateError$("Future already completed"));
    this._isComplete = true;
    this.future._zone.cancelCallbackExpectation$0();
    this._setFutureValue$1(value);
  },
  completeError$2: function(error, stackTrace) {
    var futureImpl;
    if (this._isComplete)
      throw $.wrapException($.StateError$("Future already completed"));
    this._isComplete = true;
    futureImpl = this.future;
    if (futureImpl._inSameErrorZone$1($._Zone_current())) {
      futureImpl._zone.cancelCallbackExpectation$0();
      this._setFutureError$1(error);
    } else
      $._Zone_current().handleUncaughtError$1(error);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  },
  _Completer$0: function() {
    this.future._zone.expectCallback$0();
  }
},

_AsyncCompleter: {"": "_Completer;future,_isComplete",
  _setFutureValue$1: function(value) {
    $.runAsync(new $._AsyncCompleter__setFutureValue_closure(value, this.future));
  },
  _setFutureError$1: function(error) {
    $.runAsync(new $._AsyncCompleter__setFutureError_closure(error, this.future));
  }
},

_AsyncCompleter__setFutureValue_closure: {"": "Closure;value_0,future_1",
  call$0: function() {
    this.future_1._setValue$1(this.value_0);
  }
},

_AsyncCompleter__setFutureError_closure: {"": "Closure;error_0,future_1",
  call$0: function() {
    this.future_1._setError$1(this.error_0);
  }
},

_FutureListenerWrapper: {"": "Object;future,_nextListener@",
  _sendValue$1: function(value) {
    this.future._setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  },
  _inSameErrorZone$1: function(otherZone) {
    return this.future._inSameErrorZone$1(otherZone);
  }
},

_ErrorZoneBoundaryListener: {"": "Object;_nextListener@,_listener",
  _inSameErrorZone$1: function(otherZone) {
    throw $.wrapException($.UnsupportedError$("A Zone boundary doesn't support the inSameErrorZone test."));
  },
  _sendValue$1: function(value) {
    this._listener._sendValue$1(value);
  },
  _sendError$1: function(error) {
    $._Zone_current().handleUncaughtError$1(error);
  }
},

_FutureImpl: {"": "Object;_state@,_zone<,_resultOrListeners<",
  get$_isChained: function() {
    return (this._state & 1) !== 0;
  },
  get$_isComplete: function() {
    return this._state >= 4;
  },
  get$_hasValue: function() {
    return this._state === 4;
  },
  get$_hasUnhandledError: function() {
    return this._state >= 8;
  },
  _clearUnhandledError$0: function() {
    this._state = (this._state & 4294967287) >>> 0;
  },
  then$2$onError: function(f, onError) {
    var t1;
    if (onError == null) {
      t1 = $._ThenFuture$(f);
      t1._subscribeTo$1(this);
      return t1;
    }
    t1 = $._SubscribeFuture$(f, onError);
    t1._subscribeTo$1(this);
    return t1;
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1 = new $._CatchErrorFuture(test, f, null, 0, $._Zone_current().fork$0(), null);
    t1._TransformFuture$0();
    t1._subscribeTo$1(this);
    return t1;
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _inSameErrorZone$1: function(otherZone) {
    return this._zone.inSameErrorZone$1(otherZone);
  },
  _setValue$1: function(value) {
    var listeners, listeners0;
    if (this.get$_isComplete())
      throw $.wrapException($.StateError$("Future already completed"));
    listeners = this.get$_isChained() ? null : this._removeListeners$0();
    this._state = 4;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_setValue: function() {
    return new $.BoundClosure$1(this, "_setValue$1", null);
  },
  _setError$1: function(error) {
    var hasListeners, listeners, listeners0;
    if (this.get$_isComplete())
      throw $.wrapException($.StateError$("Future already completed"));
    if (this.get$_isChained()) {
      hasListeners = this._state === 1;
      listeners = null;
    } else {
      listeners = this._removeListeners$0();
      hasListeners = listeners != null;
    }
    this._state = 6;
    this._resultOrListeners = error;
    if (!hasListeners) {
      this._scheduleUnhandledError$0();
      return;
    }
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
    }
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1", null);
  },
  _scheduleUnhandledError$0: function() {
    this._state = 14;
    $.runAsync(new $._FutureImpl__scheduleUnhandledError_closure(this));
  },
  _addListener$1: function(listener) {
    var t1 = {};
    t1.listener_0 = listener;
    if (!t1.listener_0._inSameErrorZone$1(this._zone))
      t1.listener_0 = $._ErrorZoneBoundaryListener$(t1.listener_0);
    if (this.get$_isChained()) {
      this._state = 1;
      this.get$_chainSource()._addListener$1(t1.listener_0);
      return;
    }
    if (this.get$_isComplete()) {
      this._clearUnhandledError$0();
      $.runAsync(new $._FutureImpl__addListener_closure(t1, this));
    } else {
      t1.listener_0.set$_nextListener(this._resultOrListeners);
      this._resultOrListeners = t1.listener_0;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    if (!this.get$_isComplete())
      future._chainFromFuture$1(this);
    else if (this.get$_hasValue())
      future._setValue$1(this._resultOrListeners);
    else {
      this._clearUnhandledError$0();
      future._setError$1(this._resultOrListeners);
    }
  },
  get$_chainSource: function() {
    var future = this._resultOrListeners;
    if (future.get$_isChained()) {
      future = future.get$_chainSource();
      this._resultOrListeners = future;
    }
    return future;
  },
  _chainFromFuture$1: function(resultSource) {
    var cursor, cursor0, cursor1;
    if (resultSource.get$_isChained())
      resultSource = resultSource.get$_chainSource();
    if (this === resultSource) {
      this._setError$1($.StateError$("Cyclic future dependency."));
      return;
    }
    cursor = this._removeListeners$0();
    for (cursor0 = cursor; cursor0 != null; cursor0 = cursor1) {
      cursor1 = cursor0.get$_nextListener();
      cursor0.set$_nextListener(null);
      resultSource._addListener$1(cursor0);
    }
    resultSource._addListener$1(this._asListener$0());
    this._resultOrListeners = resultSource;
    this._state = cursor != null ? 1 : 3;
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!$.getInterceptor(result).$isFuture)
      if (!!$.getInterceptor(result).$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    else
      this._setValue$1(result);
  },
  _asListener$0: function() {
    return $._FutureListener__FutureListener$wrap(this);
  },
  _FutureImpl$immediate$1: function(value) {
    this._state = 4;
    this._resultOrListeners = value;
  },
  $is_FutureImpl: true,
  $isFuture: true
},

_FutureImpl__FutureImpl$wait_handleError: {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$1(error);
    }
  }
},

_FutureImpl__FutureImpl$wait_closure: {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    t2[t3] = value;
    t1.remaining_2 = $.$sub$n(t1.remaining_2, 1);
    if ($.$eq(t1.remaining_2, 0)) {
      t2 = t1.completer_0;
      t2.complete$1(t2, t1.values_1);
    }
  }
},

_FutureImpl__scheduleUnhandledError_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1, error;
    t1 = this.this_0;
    if (t1.get$_hasUnhandledError()) {
      t1._clearUnhandledError$0();
      error = t1.get$_resultOrListeners();
      t1.get$_zone().handleUncaughtError$1(error);
    }
  }
},

_FutureImpl__addListener_closure: {"": "Closure;box_0,this_1",
  call$0: function() {
    var t1, t2, value;
    t1 = this.this_1;
    t2 = t1.get$_hasValue();
    value = t1.get$_resultOrListeners();
    t1 = this.box_0;
    if (t2)
      t1.listener_0._sendValue$1(value);
    else
      t1.listener_0._sendError$1(value);
  }
},

_TransformFuture: {"": "_FutureImpl;_nextListener@",
  _sendValue$1: function(value) {
    this._zone.executeCallback$1(new $._TransformFuture__sendValue_closure(this, value));
  },
  _sendError$1: function(error) {
    this._zone.executeCallback$1(new $._TransformFuture__sendError_closure(this, error));
  },
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  _TransformFuture$0: function() {
    this._zone.expectCallback$0();
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
},

_TransformFuture__sendValue_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    return this.this_0._zonedSendValue$1(this.value_1);
  }
},

_TransformFuture__sendError_closure: {"": "Closure;this_0,error_1",
  call$0: function() {
    return this.this_0._zonedSendError$1(this.error_1);
  }
},

_ThenFuture: {"": "_TransformFuture;_onValue,_nextListener,_state,_zone,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _zonedSendValue$1: function(value) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  _zonedSendError$1: function(error) {
    this._setError$1(error);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
},

_CatchErrorFuture: {"": "_TransformFuture;_test,_onError,_nextListener,_state,_zone,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _zonedSendValue$1: function(value) {
    this._setValue$1(value);
  },
  _zonedSendError$1: function(error) {
    var matchesTest, e, s, result, e0, s0, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e0 = t1;
      s0 = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e0, s0));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: null,
  $asFuture: null
},

_SubscribeFuture: {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_zone,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _zonedSendError$1: function(error) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
},

_WhenFuture: {"": "_TransformFuture;_action,_nextListener,_state,_zone,_resultOrListeners",
  _action$0: function() {
    return this._action.call$0();
  },
  _zonedSendValue$1: function(value) {
    var result, resultFuture, e, s, t1, exception;
    try {
      result = this._action$0();
      t1 = result;
      if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__zonedSendValue_closure(this, value), this.get$_setError());
        return;
      }
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setValue$1(value);
  },
  _zonedSendError$1: function(error) {
    var t1, result, resultFuture, e, s, t2, exception;
    t1 = {};
    t1.error_0 = error;
    try {
      result = this._action$0();
      t2 = result;
      if (typeof t2 === "object" && t2 !== null && !!$.getInterceptor(t2).$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__zonedSendError_closure(t1, this), this.get$_setError());
        return;
      }
    } catch (exception) {
      t2 = $.unwrapException(exception);
      e = t2;
      s = $.getTraceFromException(exception);
      t1.error_0 = $._asyncError(e, s);
    }

    this._setError$1(t1.error_0);
  },
  $as_FutureImpl: null,
  $asFuture: null
},

_WhenFuture__zonedSendValue_closure: {"": "Closure;this_0,value_1",
  call$1: function(_) {
    this.this_0._setValue$1(this.value_1);
  }
},

_WhenFuture__zonedSendError_closure: {"": "Closure;box_0,this_1",
  call$1: function(_) {
    this.this_1._setError$1(this.box_0.error_0);
  }
},

Stream: {"": "Object;",
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = new $._FutureImpl(0, $._Zone_current().fork$0(), null);
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new $.Stream_length_closure(t1), true, new $.Stream_length_closure0(t1, future), future.get$_setError());
    return future;
  }
},

Stream_length_closure: {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.$add$ns(t1.count_0, 1);
  }
},

Stream_length_closure0: {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._setValue$1(this.box_0.count_0);
  }
},

StreamSubscription: {"": "Object;"},

EventSink: {"": "Object;"},

_BufferingStreamSubscription: {"": "Object;_onData,_onError,_onDone,_zone<,_state@,_pending",
  _onData$1: function(arg0) {
    return this._onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  pause$1: function(_, resumeSignal) {
    var wasPaused, wasInputPaused;
    if (this.get$_isCanceled())
      return;
    wasPaused = this.get$_isPaused();
    wasInputPaused = this.get$_isInputPaused();
    this._state = (this._state + 64 | 4) >>> 0;
    if (!wasPaused && this._pending != null)
      this._pending.cancelSchedule$0();
    if (!wasInputPaused && !this.get$_inCallback())
      this._guardCallback$1(this.get$_onPause());
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function() {
    if (this.get$_isCanceled())
      return;
    if (this.get$_isPaused()) {
      this._decrementPauseCount$0();
      if (!this.get$_isPaused()) {
        if (this.get$_hasPending()) {
          var t1 = this._pending;
          t1 = !t1.get$isEmpty(t1);
        } else
          t1 = false;
        if (t1)
          this._pending.schedule$1(this);
        else {
          this._state = (this._state & 4294967291) >>> 0;
          if (!this.get$_inCallback())
            this._guardCallback$1(this.get$_onResume());
        }
      }
    }
  },
  cancel$0: function() {
    if (this.get$_isCanceled())
      return;
    this._cancel$0();
    if (!this.get$_inCallback()) {
      this._state = (this._state | 16) >>> 0;
      this._onCancel$0();
      this._pending = null;
      this._state = (this._state & 4294967279) >>> 0;
    }
  },
  get$_isInputPaused: function() {
    return (this._state & 4) !== 0;
  },
  get$_liblib4$_isClosed: function() {
    return (this._state & 2) !== 0;
  },
  get$_isCanceled: function() {
    return (this._state & 8) !== 0;
  },
  get$_inCallback: function() {
    return (this._state & 16) !== 0;
  },
  get$_hasPending: function() {
    return (this._state & 32) !== 0;
  },
  get$_isPaused: function() {
    return this._state >= 64;
  },
  get$_canFire: function() {
    return this._state < 16;
  },
  get$_mayResumeInput: function() {
    if (!this.get$_isPaused()) {
      var t1 = this._pending;
      t1 = t1 == null || t1.get$isEmpty(t1);
    } else
      t1 = false;
    return t1;
  },
  get$_cancelOnError: function() {
    return (this._state & 1) !== 0;
  },
  _cancel$0: function() {
    this._state = (this._state | 8) >>> 0;
    this._zone.cancelCallbackExpectation$0();
    if (this.get$_hasPending())
      this._pending.cancelSchedule$0();
  },
  _decrementPauseCount$0: function() {
    this._state = this._state - 64;
  },
  _liblib4$_add$1: function(data) {
    if (this.get$_isCanceled())
      return;
    if (this.get$_canFire())
      this._sendData$1(data);
    else
      this._addPending$1($._DelayedData$(data));
  },
  _addError$1: function(error) {
    if (this.get$_isCanceled())
      return;
    if (this.get$_canFire())
      this._sendError$1(error);
    else
      this._addPending$1($._DelayedError$(error));
  },
  _close$0: function() {
    if (this.get$_isCanceled())
      return;
    this._state = (this._state | 2) >>> 0;
    if (this.get$_canFire())
      this._sendDone$0();
    else
      this._addPending$1($.C__DelayedDone);
  },
  _onPause$0: function() {
  },
  get$_onPause: function() {
    return new $.BoundClosure$0(this, "_onPause$0", null);
  },
  _onResume$0: function() {
  },
  get$_onResume: function() {
    return new $.BoundClosure$0(this, "_onResume$0", null);
  },
  _onCancel$0: function() {
  },
  _addPending$1: function($event) {
    var pending = this._pending;
    if (pending == null) {
      pending = $._StreamImplEvents$();
      this._pending = pending;
    }
    pending.add$1(pending, $event);
    if (!this.get$_hasPending()) {
      this._state = (this._state | 32) >>> 0;
      if (!this.get$_isPaused())
        this._pending.schedule$1(this);
    }
  },
  _sendData$1: function(data) {
    var wasInputPaused = this.get$_isInputPaused();
    this._state = (this._state | 16) >>> 0;
    this._zone.executePeriodicCallbackGuarded$1(new $._BufferingStreamSubscription__sendData_closure(this, data));
    this._state = (this._state & 4294967279) >>> 0;
    this._checkState$1(wasInputPaused);
  },
  _sendError$1: function(error) {
    var wasInputPaused, t1;
    wasInputPaused = this.get$_isInputPaused();
    this._state = (this._state | 16) >>> 0;
    t1 = this._zone;
    if (!t1.inSameErrorZone$1($._Zone_current()))
      $._Zone_current().handleUncaughtError$1(error);
    else
      t1.executePeriodicCallbackGuarded$1(new $._BufferingStreamSubscription__sendError_closure(this, error));
    this._state = (this._state & 4294967279) >>> 0;
    if (this.get$_cancelOnError())
      this._cancel$0();
    this._checkState$1(wasInputPaused);
  },
  _sendDone$0: function() {
    this._state = (this._state | 26) >>> 0;
    this._zone.executeCallbackGuarded$1(this._onDone);
    this._onCancel$0();
    this._state = (this._state & 4294967279) >>> 0;
  },
  _guardCallback$1: function(callback) {
    var wasInputPaused = this.get$_isInputPaused();
    this._state = (this._state | 16) >>> 0;
    callback.call$0();
    this._state = (this._state & 4294967279) >>> 0;
    this._checkState$1(wasInputPaused);
  },
  _checkState$1: function(wasInputPaused) {
    var t1, isInputPaused;
    if (this.get$_hasPending()) {
      t1 = this._pending;
      t1 = t1.get$isEmpty(t1);
    } else
      t1 = false;
    if (t1) {
      this._state = (this._state & 4294967263) >>> 0;
      if (this.get$_isInputPaused() && this.get$_mayResumeInput())
        this._state = (this._state & 4294967291) >>> 0;
    }
    for (; true; wasInputPaused = isInputPaused) {
      t1 = this._state;
      if ((t1 & 8) !== 0) {
        this._onCancel$0();
        this._pending = null;
        return;
      }
      isInputPaused = (t1 & 4) !== 0;
      if (wasInputPaused === isInputPaused)
        break;
      this._state = (t1 ^ 16) >>> 0;
      if (isInputPaused)
        this._onPause$0();
      else
        this._onResume$0();
      this._state = (this._state & 4294967279) >>> 0;
    }
    if (this.get$_hasPending() && !this.get$_isPaused())
      this._pending.schedule$1(this);
  },
  _BufferingStreamSubscription$4: function(_onData, _onError, _onDone, cancelOnError) {
    this._zone.expectCallback$0();
  }
},

_BufferingStreamSubscription__sendData_closure: {"": "Closure;this_0,data_1",
  call$0: function() {
    return this.this_0._onData$1(this.data_1);
  }
},

_BufferingStreamSubscription__sendError_closure: {"": "Closure;this_0,error_1",
  call$0: function() {
    return this.this_0._onError$1(this.error_1);
  }
},

_DelayedEvent: {"": "Object;next@",
  next$0: function() {
    return this.next.call$0();
  }
},

_DelayedData: {"": "_DelayedEvent;value,next",
  perform$1: function(dispatch) {
    dispatch._sendData$1(this.value);
  }
},

_DelayedError: {"": "_DelayedEvent;error,next",
  perform$1: function(dispatch) {
    dispatch._sendError$1(this.error);
  }
},

_DelayedDone: {"": "Object;",
  perform$1: function(dispatch) {
    dispatch._sendDone$0();
  },
  get$next: function() {
    return;
  },
  next$0: function() {
    return this.get$next().call$0();
  },
  set$next: function(_) {
    throw $.wrapException($.StateError$("No events after a done."));
  }
},

_PendingEvents: {"": "Object;_state@",
  get$isScheduled: function() {
    return this._state === 1;
  },
  get$_eventScheduled: function() {
    return this._state >= 1;
  },
  schedule$1: function(dispatch) {
    if (this.get$isScheduled())
      return;
    if (this.get$_eventScheduled()) {
      this._state = 1;
      return;
    }
    $.runAsync(new $._PendingEvents_schedule_closure(this, dispatch));
    this._state = 1;
  },
  cancelSchedule$0: function() {
    if (this.get$isScheduled())
      this._state = 3;
  }
},

_PendingEvents_schedule_closure: {"": "Closure;this_0,dispatch_1",
  call$0: function() {
    var t1, oldState;
    t1 = this.this_0;
    oldState = t1.get$_state();
    t1.set$_state(0);
    if (oldState === 3)
      return;
    t1.handleNext$1(this.dispatch_1);
  }
},

_StreamImplEvents: {"": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
  get$isEmpty: function(_) {
    return this.lastPendingEvent == null;
  },
  add$1: function(_, $event) {
    var t1 = this.lastPendingEvent;
    if (t1 == null) {
      this.lastPendingEvent = $event;
      this.firstPendingEvent = $event;
    } else {
      t1.set$next($event);
      this.lastPendingEvent = $event;
    }
  },
  handleNext$1: function(dispatch) {
    var $event = this.firstPendingEvent;
    this.firstPendingEvent = $event.get$next();
    if (this.firstPendingEvent == null)
      this.lastPendingEvent = null;
    $event.perform$1(dispatch);
  },
  clear$0: function(_) {
    if (this._state === 1)
      if (this.get$isScheduled())
        this._state = 3;
    this.lastPendingEvent = null;
    this.firstPendingEvent = null;
  }
},

_ForwardingStream: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    return this._createSubscription$4(onData, onError, onDone, true === cancelOnError);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
    return $._ForwardingStreamSubscription$(this, onData, onError, onDone, cancelOnError);
  },
  _handleData$2: function(data, sink) {
    sink._liblib4$_add$1(data);
  },
  _handleError$2: function(error, sink) {
    sink._addError$1(error);
  },
  _handleDone$1: function(sink) {
    sink._close$0();
  }
},

_ForwardingStreamSubscription: {"": "_BufferingStreamSubscription;_stream,_subscription,_onData,_onError,_onDone,_zone,_state,_pending",
  _liblib4$_add$1: function(data) {
    if (this.get$_liblib4$_isClosed())
      return;
    $._BufferingStreamSubscription.prototype._liblib4$_add$1.call(this, data);
  },
  _addError$1: function(error) {
    if (this.get$_liblib4$_isClosed())
      return;
    $._BufferingStreamSubscription.prototype._addError$1.call(this, error);
  },
  _onPause$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.pause$0(t1);
  },
  get$_onPause: function() {
    return new $.BoundClosure$0(this, "_onPause$0", null);
  },
  _onResume$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.resume$0();
  },
  get$_onResume: function() {
    return new $.BoundClosure$0(this, "_onResume$0", null);
  },
  _onCancel$0: function() {
    var t1 = this._subscription;
    if (t1 != null) {
      this._subscription = null;
      t1.cancel$0();
    }
  },
  _handleData$1: function(data) {
    this._stream._handleData$2(data, this);
  },
  get$_handleData: function() {
    return new $.BoundClosure$1(this, "_handleData$1", null);
  },
  _handleError$1: function(error) {
    this._stream._handleError$2(error, this);
  },
  get$_handleError: function() {
    return new $.BoundClosure$1(this, "_handleError$1", null);
  },
  _handleDone$0: function() {
    this._stream._handleDone$1(this);
  },
  get$_handleDone: function() {
    return new $.BoundClosure$0(this, "_handleDone$0", null);
  },
  _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, cancelOnError) {
    var t1, t2;
    t1 = this.get$_handleData();
    t2 = this.get$_handleError();
    this._subscription = this._stream._source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
  }
},

_WhereStream: {"": "_ForwardingStream;_test,_source",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var satisfies, e, s, exception, t1;
    satisfies = null;
    try {
      satisfies = this._test$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      sink._addError$1($._asyncError(e, s));
      return;
    }

    if (satisfies === true)
      sink._liblib4$_add$1(inputEvent);
  }
},

_MapStream: {"": "_ForwardingStream;_transform,_source",
  _transform$1: function(arg0) {
    return this._transform.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var outputEvent, e, s, exception, t1;
    outputEvent = null;
    try {
      outputEvent = this._transform$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      sink._addError$1($._asyncError(e, s));
      return;
    }

    sink._liblib4$_add$1(outputEvent);
  }
},

_SkipStream: {"": "_ForwardingStream;_remaining,_source",
  _handleData$2: function(inputEvent, sink) {
    var t1, t2;
    t1 = this._remaining;
    t2 = $.getInterceptor$n(t1);
    if (t2.$gt(t1, 0)) {
      this._remaining = t2.$sub(t1, 1);
      return;
    }
    return sink._liblib4$_add$1(inputEvent);
  }
},

_ZoneBase: {"": "Object;_parentZone,_children,_openCallbacks,_isExecutingCallback",
  get$_errorZone: function() {
    return this._parentZone.get$_errorZone();
  },
  handleUncaughtError$1: function(error) {
    this._parentZone.handleUncaughtError$1(error);
  },
  inSameErrorZone$1: function(otherZone) {
    return $.$eq(this.get$_errorZone(), otherZone.get$_errorZone());
  },
  fork$0: function() {
    return this;
  },
  expectCallback$0: function() {
    var t1 = this._openCallbacks;
    this._openCallbacks = t1 + 1;
    return t1;
  },
  cancelCallbackExpectation$0: function() {
    this._openCallbacks = this._openCallbacks - 1;
    this._checkIfDone$0();
  },
  _dispose$0: function() {
  },
  _checkIfDone$0: function() {
    if (!this._isExecutingCallback && this._openCallbacks === 0 && $.JSArray_methods.get$isEmpty(this._children))
      this._dispose$0();
  },
  executeCallback$1: function(f) {
    this._openCallbacks = this._openCallbacks - 1;
    this._runUnguarded$1(f);
  },
  executeCallbackGuarded$1: function(f) {
    this._openCallbacks = this._openCallbacks - 1;
    this._runGuarded$1(f);
  },
  executePeriodicCallbackGuarded$1: function(f) {
    this._runGuarded$1(f);
  },
  _runInZone$2: function(f, handleUncaught) {
    var oldZone, oldIsExecuting, e, s, t1, exception;
    if ($.get$_Zone__current() === this && handleUncaught !== true && this._isExecutingCallback)
      return f.call$0();
    oldZone = $.get$_Zone__current();
    $._Zone__current = this;
    oldIsExecuting = this._isExecutingCallback;
    this._isExecutingCallback = true;
    try {
      try {
        t1 = f.call$0();
        return t1;
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        if (handleUncaught === true)
          this.handleUncaughtError$1($._asyncError(e, s));
        else
          throw exception;
      }

    } finally {
      this._isExecutingCallback = oldIsExecuting;
      $._Zone__current = oldZone;
      this._checkIfDone$0();
    }
  },
  _runGuarded$1: function(f) {
    return this._runInZone$2(f, true);
  },
  _runUnguarded$1: function(f) {
    return this._runInZone$2(f, false);
  },
  runAsync$2: function(f, zone) {
    return this._parentZone.runAsync$2(f, zone);
  },
  createTimer$2: function(duration, callback) {
    return $._ZoneTimer$(this, duration, callback);
  },
  _ZoneBase$_defaultZone$0: function() {
  }
},

_DefaultZone: {"": "_ZoneBase;_parentZone,_children,_openCallbacks,_isExecutingCallback",
  get$_errorZone: function() {
    return this;
  },
  handleUncaughtError$1: function(error) {
    $._scheduleAsyncCallback(new $._DefaultZone_handleUncaughtError_closure(error));
  },
  runAsync$2: function(f, zone) {
    if (this === zone) {
      $._scheduleAsyncCallback(f);
      return;
    }
    zone.expectCallback$0();
    $._scheduleAsyncCallback(new $._DefaultZone_runAsync_closure(f, zone));
  }
},

_DefaultZone_handleUncaughtError_closure: {"": "Closure;error_0",
  call$0: function() {
    var t1, trace;
    t1 = this.error_0;
    $.print("Uncaught Error: " + $.S(t1));
    trace = $.getAttachedStackTrace(t1);
    $._attachStackTrace(t1, null);
    if (trace != null)
      $.print("Stack Trace:\n" + $.S(trace) + "\n");
    throw $.wrapException(t1);
  }
},

_DefaultZone_runAsync_closure: {"": "Closure;f_0,zone_1",
  call$0: function() {
    this.zone_1.executeCallbackGuarded$1(this.f_0);
  }
},

_ZoneTimer: {"": "Object;_zone<,_liblib4$_callback,_timer",
  _run$0: function() {
    this._zone.executeCallbackGuarded$1(this._liblib4$_callback);
  },
  get$_run: function() {
    return new $.BoundClosure$0(this, "_run$0", null);
  },
  _ZoneTimer$3: function(_zone, duration, _callback) {
    this._zone.expectCallback$0();
    this._timer = $._createTimer(duration, this.get$_run());
  }
},

_attachStackTrace: function(o, st) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  t1.$indexSet(t1, o, st);
},

getAttachedStackTrace: function(o) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  return t1.$index(t1, o);
},

_asyncRunCallback: function() {
  var callback, t1, exception, milliseconds;
  for (; t1 = $.get$_asyncCallbacks(), t1._head !== t1._tail;) {
    callback = $.get$_asyncCallbacks().removeFirst$0();
    try {
      callback.call$0();
    } catch (exception) {
      $.unwrapException(exception);
      milliseconds = $.JSNumber_methods.$tdiv($.Duration_0._duration, 1000);
      $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, $._asyncRunCallback$closure);
      throw exception;
    }

  }
  $._callbacksAreEnqueued = false;
},

_scheduleAsyncCallback: function(callback) {
  var t1 = $.get$_asyncCallbacks();
  t1.add$1(t1, callback);
  if (!$._callbacksAreEnqueued) {
    $._AsyncRun__enqueueImmediate($._asyncRunCallback$closure);
    $._callbacksAreEnqueued = true;
  }
},

runAsync: function(callback) {
  var currentZone = $.get$_Zone__current();
  currentZone.runAsync$2(callback, currentZone);
},

_AsyncRun__enqueueImmediate: function(callback) {
  var milliseconds = $.Duration_0.get$inMilliseconds();
  $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
},

Future_Future$value: function(value) {
  return $._FutureImpl$immediate(value);
},

Future_wait: function(futures) {
  return $._FutureImpl__FutureImpl$wait(futures);
},

Completer_Completer: function() {
  return $._AsyncCompleter$();
},

_AsyncCompleter$: function() {
  var t1 = new $._AsyncCompleter($._FutureImpl$(), false);
  t1._Completer$0();
  return t1;
},

_FutureListener__FutureListener$wrap: function(future) {
  return $._FutureListenerWrapper$(future);
},

_FutureListenerWrapper$: function(future) {
  return new $._FutureListenerWrapper(future, null);
},

_ErrorZoneBoundaryListener$: function(_listener) {
  return new $._ErrorZoneBoundaryListener(null, _listener);
},

_FutureImpl$: function() {
  return new $._FutureImpl(0, $._Zone_current().fork$0(), null);
},

_FutureImpl$immediate: function(value) {
  var t1 = new $._FutureImpl(0, $._Zone_current().fork$0(), null);
  t1._FutureImpl$immediate$1(value);
  return t1;
},

_FutureImpl__FutureImpl$wait: function(futures) {
  var t1, t2, t3, future, pos;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = $.JSArray_methods.get$iterator(futures); t3.moveNext$0();) {
    future = t3._current;
    pos = t1.remaining_2;
    t1.remaining_2 = $.$add$ns(pos, 1);
    future.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_closure(t1, pos));
  }
  t2 = t1.remaining_2;
  if ($.$eq(t2, 0))
    return $.Future_Future$value($.List_empty);
  t1.values_1 = $.List_List(t2);
  t1.completer_0 = $.Completer_Completer();
  return t1.completer_0.future;
},

_ThenFuture$: function(_onValue) {
  var t1 = new $._ThenFuture(_onValue, null, 0, $._Zone_current().fork$0(), null);
  t1._TransformFuture$0();
  return t1;
},

_SubscribeFuture$: function(onValue, _onError) {
  var t1 = new $._SubscribeFuture(_onError, onValue, null, 0, $._Zone_current().fork$0(), null);
  t1._TransformFuture$0();
  return t1;
},

_nullDataHandler: function(value) {
},

_nullErrorHandler: function(error) {
  $._Zone_current().handleUncaughtError$1(error);
},

_nullDoneHandler: function() {
},

_DelayedData$: function(value) {
  return new $._DelayedData(value, null);
},

_DelayedError$: function(error) {
  return new $._DelayedError(error, null);
},

_StreamImplEvents$: function() {
  return new $._StreamImplEvents(null, null, 0);
},

_asyncError: function(error, stackTrace) {
  if (stackTrace == null)
    return error;
  if ($.getAttachedStackTrace(error) != null)
    return error;
  $._attachStackTrace(error, stackTrace);
  return error;
},

_ForwardingStreamSubscription$: function(_stream, onData, onError, onDone, cancelOnError) {
  var t1, t2;
  t1 = $._Zone_current();
  t2 = cancelOnError ? 1 : 0;
  t2 = new $._ForwardingStreamSubscription(_stream, null, onData, onError, onDone, t1, t2, null);
  t2._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError);
  t2._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, cancelOnError);
  return t2;
},

Timer_Timer: function(duration, callback) {
  return $._Zone_current().createTimer$2(duration, callback);
},

Timer_run: function(callback) {
  $.Timer_Timer($.Duration_0, callback);
},

_createTimer: function(duration, callback) {
  var milliseconds = duration.get$inMilliseconds();
  return $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
},

_Zone_current: function() {
  return $.get$_Zone__current();
},

_DefaultZone$: function() {
  var t1 = new $._DefaultZone(null, [], 0, false);
  t1._ZoneBase$_defaultZone$0();
  return t1;
},

_ZoneTimer$: function(_zone, duration, _callback) {
  var t1 = new $._ZoneTimer(_zone, _callback, null);
  t1._ZoneTimer$3(_zone, duration, _callback);
  return t1;
}}],
["dart.collection", "dart:collection", , {
HashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  }
},

HashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib1$_length;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return new $.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
  },
  $asIterable: null
},

HashMapKeyIterator: {"": "Object;_map,_keys,_offset,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else if (offset >= keys.length) {
      this._liblib1$_current = null;
      return false;
    } else {
      this._liblib1$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

LinkedHashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  }
},

LinkedHashMapCell: {"": "Object;_key<,_value@,_next?,_previous"},

LinkedHashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib1$_length;
  },
  get$iterator: function(_) {
    var t1, t2, t3;
    t1 = this._map;
    t2 = t1._modifications;
    t3 = new $.LinkedHashMapKeyIterator(t1, t2, null, null);
    t3.LinkedHashMapKeyIterator$2(t1, t2);
    return t3;
  },
  $asIterable: null
},

LinkedHashMapKeyIterator: {"": "Object;_map,_modifications,_cell,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib1$_current = null;
        return false;
      } else {
        this._liblib1$_current = t1._key;
        this._cell = this._cell._next;
        return true;
      }
    }
  },
  LinkedHashMapKeyIterator$2: function(_map, _modifications) {
    this._cell = this._map._first;
  }
},

HashMap: {"": "Object;_liblib1$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._liblib1$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib1$_length === 0;
  },
  get$keys: function() {
    return $.HashMapKeyIterable$(this);
  },
  get$values: function(_) {
    var t1 = this.get$keys();
    return t1.map$1(t1, new $.HashMap_values_closure(this));
  },
  containsKey$1: function(key) {
    var strings, nums, rest;
    if ($.HashMap__isStringKey(key)) {
      strings = this._strings;
      return strings == null ? false : $.HashMap__hasTableEntry(strings, key);
    } else if ($.HashMap__isNumericKey(key)) {
      nums = this._nums;
      return nums == null ? false : $.HashMap__hasTableEntry(nums, key);
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.HashMap__findBucketIndex($.HashMap__getBucket(rest, key), key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.HashMap__computeHashCode(key)];
      index = $.HashMap__findBucketIndex(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, t1, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        $.HashMap__setTableEntry(table, "<non-identifier-key>", table);
        $.HashMap__deleteTableEntry(table, "<non-identifier-key>");
        this._strings = table;
        strings = table;
      }
      if (!$.HashMap__hasTableEntry(strings, key)) {
        this._liblib1$_length = this._liblib1$_length + 1;
        this._keys = null;
      }
      $.HashMap__setTableEntry(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        $.HashMap__setTableEntry(table, "<non-identifier-key>", table);
        $.HashMap__deleteTableEntry(table, "<non-identifier-key>");
        this._nums = table;
        nums = table;
      }
      if (!$.HashMap__hasTableEntry(nums, key)) {
        this._liblib1$_length = this._liblib1$_length + 1;
        this._keys = null;
      }
      $.HashMap__setTableEntry(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        $.HashMap__setTableEntry(table, "<non-identifier-key>", table);
        $.HashMap__deleteTableEntry(table, "<non-identifier-key>");
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null) {
        t1 = [key, value];
        if (t1 == null)
          rest[hash] = rest;
        else
          rest[hash] = t1;
        this._liblib1$_length = this._liblib1$_length + 1;
        this._keys = null;
      } else {
        index = $.HashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._liblib1$_length = this._liblib1$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index;
    if ($.HashMap__isStringKey(key))
      return this._removeHashTableEntry$2(this._strings, key);
    else if ($.HashMap__isNumericKey(key))
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = $.HashMap__getBucket(rest, key);
      index = $.HashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      this._liblib1$_length = this._liblib1$_length - 1;
      this._keys = null;
      return bucket.splice(index, 2)[1];
    }
  },
  clear$0: function(_) {
    if (this._liblib1$_length > 0) {
      this._keys = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._liblib1$_length = 0;
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw $.wrapException(new $.ConcurrentModificationError(this));
    }
  },
  toString$0: function(_) {
    return $.Maps_mapToString(this);
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = $.List_List(this._liblib1$_length);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _removeHashTableEntry$2: function(table, key) {
    var value;
    if (table != null && $.HashMap__hasTableEntry(table, key)) {
      value = $.HashMap__getTableEntry(table, key);
      $.HashMap__deleteTableEntry(table, key);
      this._liblib1$_length = this._liblib1$_length - 1;
      this._keys = null;
      return value;
    } else
      return;
  },
  $isMap: true
},

IterableBase: {"": "Object;",
  map$1: function(_, f) {
    return $.MappedIterable$(this, f);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (typeof index !== "number")
      return this.elementAt$1$bailout(1, index);
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw $.wrapException(new $.RangeError("value " + $.S(index)));
  },
  elementAt$1$bailout: function(state0, index) {
    var t1, remaining, element, t2;
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      t2 = $.getInterceptor(remaining);
      if (t2.$eq(remaining, 0))
        return element;
      remaining = t2.$sub(remaining, 1);
    }
    throw $.wrapException(new $.RangeError("value " + $.S(index)));
  },
  $isIterable: true,
  $asIterable: null
},

LinkedHashMap: {"": "Object;_liblib1$_length,_strings,_nums,_rest,_first,_last,_modifications",
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.LinkedHashMap__computeHashCode(key)];
      index = $.LinkedHashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        $.LinkedHashMap__setTableEntry(table, "<non-identifier-key>", table);
        $.LinkedHashMap__deleteTableEntry(table, "<non-identifier-key>");
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        $.LinkedHashMap__setTableEntry(table, "<non-identifier-key>", table);
        $.LinkedHashMap__deleteTableEntry(table, "<non-identifier-key>");
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        $.LinkedHashMap__setTableEntry(table, "<non-identifier-key>", table);
        $.LinkedHashMap__deleteTableEntry(table, "<non-identifier-key>");
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = $.LinkedHashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  clear$0: function(_) {
    if (this._liblib1$_length > 0) {
      this._last = null;
      this._first = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._liblib1$_length = 0;
      this._modifications = this._modifications + 1 & 67108863;
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell._key, cell._value);
      if (modifications !== this._modifications)
        throw $.wrapException(new $.ConcurrentModificationError(this));
      cell = cell._next;
    }
  },
  get$keys: function() {
    return $.LinkedHashMapKeyIterable$(this);
  },
  get$values: function(_) {
    var t1 = this.get$keys();
    return t1.map$1(t1, new $.LinkedHashMap_values_closure(this));
  },
  get$length: function(_) {
    return this._liblib1$_length;
  },
  toString$0: function(_) {
    return $.Maps_mapToString(this);
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell = $.LinkedHashMap__getTableEntry(table, key);
    if (cell == null)
      $.LinkedHashMap__setTableEntry(table, key, this._newLinkedCell$2(key, value));
    else
      cell.set$_value(value);
  },
  _modified$0: function() {
    this._modifications = this._modifications + 1 & 67108863;
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = $.LinkedHashMapCell$(key, value);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._liblib1$_length = this._liblib1$_length + 1;
    this._modified$0();
    return cell;
  },
  $isMap: true
},

ListBase: {"": "Object+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null},

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, this.get$length(receiver), 0, null);
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.forEach$1$bailout(1, action, receiver);
    $length = receiver.length;
    for (i = 0; i < $length; ++i) {
      if (i >= receiver.length)
        throw $.ioore(i);
      action.call$1(receiver[i]);
      if ($length !== receiver.length)
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
  },
  forEach$1$bailout: function(state0, action, receiver) {
    var $length, i;
    $length = this.get$length(receiver);
    if (typeof $length !== "number")
      throw $.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
  },
  get$last: function(receiver) {
    if ($.$eq(this.get$length(receiver), 0))
      throw $.wrapException($.StateError$("No elements"));
    return this.$index(receiver, $.$sub$n(this.get$length(receiver), 1));
  },
  where$1: function(receiver, test) {
    return $.WhereIterable$(receiver, test);
  },
  toList$1$growable: function(receiver, growable) {
    var result, t1, t2, i, t3;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.toList$1$growable$bailout(1, growable, receiver);
    if (growable) {
      result = $.List_List(null);
      $.JSArray_methods.set$length(result, receiver.length);
    } else
      result = $.List_List(receiver.length);
    for (t1 = receiver.length, t2 = result.length, i = 0; i < t1; ++i) {
      t3 = receiver[i];
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  },
  toList$1$growable$bailout: function(state0, growable, receiver) {
    var result, i, t1;
    if (growable) {
      result = $.List_List(null);
      $.JSArray_methods.set$length(result, this.get$length(receiver));
    } else
      result = $.List_List(this.get$length(receiver));
    i = 0;
    while (true) {
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      if (!(i < t1))
        break;
      t1 = this.$index(receiver, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
      ++i;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, element) {
    var t1 = this.get$length(receiver);
    if (typeof t1 !== "number")
      return this.add$1$bailout(1, element, receiver, t1);
    this.set$length(receiver, t1 + 1);
    this.$indexSet(receiver, t1, element);
  },
  add$1$bailout: function(state0, element, receiver, t1) {
    this.set$length(receiver, $.$add$ns(t1, 1));
    this.$indexSet(receiver, t1, element);
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  removeLast$0: function(receiver) {
    var result;
    if ($.$eq(this.get$length(receiver), 0))
      throw $.wrapException($.StateError$("No elements"));
    result = this.$index(receiver, $.$sub$n(this.get$length(receiver), 1));
    this.set$length(receiver, $.$sub$n(this.get$length(receiver), 1));
    return result;
  },
  toString$0: function(receiver) {
    return $.ToString_iterableToString(receiver);
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
},

ListQueue: {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return new $._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
  },
  get$isEmpty: function(_) {
    return this._head === this._tail;
  },
  get$length: function(_) {
    var t1 = this._tail;
    if (typeof t1 !== "number")
      return this.get$length$bailout1(1, t1);
    return (t1 - this._head & this._table.length - 1) >>> 0;
  },
  get$length$bailout1: function(state0, t1) {
    var t2;
    t1 = $.$sub$n(t1, this._head);
    t2 = this._table;
    if (typeof t1 !== "number")
      throw t1.$and();
    return (t1 & t2.length - 1) >>> 0;
  },
  add$1: function(_, element) {
    this._add$1(element);
  },
  clear$0: function(_) {
    var i, t1, t2, t3, t4;
    i = this._head;
    t1 = this._tail;
    if (i !== t1) {
      for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
        if (i < 0 || i >= t3)
          throw $.ioore(i);
        t2[i] = null;
      }
      this._tail = 0;
      this._head = 0;
      this._modificationCount = this._modificationCount + 1;
    }
  },
  toString$0: function(_) {
    return $.ToString_iterableToString(this);
  },
  addLast$1: function(element) {
    this._add$1(element);
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw $.wrapException(new $.StateError("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  removeLast$0: function(_) {
    var t1, t2;
    if (this._head === this._tail)
      throw $.wrapException($.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = $.$sub$n(this._tail, 1);
    t2 = this._table;
    if (typeof t1 !== "number")
      throw t1.$and();
    this._tail = (t1 & t2.length - 1) >>> 0;
    t2 = this._table;
    t1 = this._tail;
    if (t1 >>> 0 !== t1 || t1 >= t2.length)
      throw $.ioore(t1);
    return t2[t1];
  },
  _add$1: function(element) {
    var t1, t2, t3;
    t1 = this._table;
    t2 = this._tail;
    t3 = t1.length;
    if (t2 >>> 0 !== t2 || t2 >= t3)
      throw $.ioore(t2);
    t1[t2] = element;
    ++t2;
    if (t2 !== (t2 | 0))
      throw t2.$and();
    this._tail = (t2 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = $.List_List(this._table.length * 2);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    $.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
    $.JSArray_methods.setRange$4(newTable, split, split + this._head, this._table, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  ListQueue$1: function(initialCapacity) {
    if (true)
      initialCapacity = 8;
    else if (!$.ListQueue__isPowerOf2(initialCapacity))
      initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    this._table = $.List_List(initialCapacity);
  },
  $asIterable: null,
  $isIterable: true
},

_ListQueueIterator: {"": "Object;_queue,_end,_modificationCount,_liblib1$_position,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      $.throwExpression($.ConcurrentModificationError$(t1));
    t2 = this._liblib1$_position;
    if (t2 === this._end) {
      this._liblib1$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw $.ioore(t2);
    this._liblib1$_current = t3[t2];
    this._liblib1$_position = (this._liblib1$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  }
},

HashMap__isStringKey: function(key) {
  return typeof key === "string" && key !== "__proto__";
},

HashMap__isNumericKey: function(key) {
  return typeof key === "number" && (key & 0x3ffffff) === key;
},

HashMap__computeHashCode: function(key) {
  return $.get$hashCode$(key) & 0x3ffffff;
},

HashMap__hasTableEntry: function(table, key) {
  return table[key] != null;
},

HashMap__getTableEntry: function(table, key) {
  var entry = table[key];
  return entry === table ? null : entry;
},

HashMap__setTableEntry: function(table, key, value) {
  if (value == null)
    table[key] = table;
  else
    table[key] = value;
},

HashMap__deleteTableEntry: function(table, key) {
  delete table[key];
},

HashMap__getBucket: function(table, key) {
  return table[$.HashMap__computeHashCode(key)];
},

HashMap__findBucketIndex: function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; i += 2)
    if ($.$eq(bucket[i], key))
      return i;
  return -1;
},

HashMapKeyIterable$: function(_map) {
  return new $.HashMapKeyIterable(_map);
},

LinkedHashMap__computeHashCode: function(key) {
  return $.get$hashCode$(key) & 0x3ffffff;
},

LinkedHashMap__getTableEntry: function(table, key) {
  return table[key];
},

LinkedHashMap__setTableEntry: function(table, key, value) {
  table[key] = value;
},

LinkedHashMap__deleteTableEntry: function(table, key) {
  delete table[key];
},

LinkedHashMap__findBucketIndex: function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq(bucket[i].get$_key(), key))
      return i;
  return -1;
},

LinkedHashMapCell$: function(_key, _value) {
  return new $.LinkedHashMapCell(_key, _value, null, null);
},

LinkedHashMapKeyIterable$: function(_map) {
  return new $.LinkedHashMapKeyIterable(_map);
},

LinkedHashMapKeyIterator$: function(_map, _modifications) {
  var t1 = new $.LinkedHashMapKeyIterator(_map, _modifications, null, null);
  t1.LinkedHashMapKeyIterator$2(_map, _modifications);
  return t1;
},

HashMap$: function() {
  return new $.HashMap(0, null, null, null, null);
},

LinkedHashMap$: function() {
  return new $.LinkedHashMap(0, null, null, null, null, null, 0);
},

Maps_mapToString: function(m) {
  return $.ToString_mapToString(m);
},

Queue_Queue: function() {
  return $.ListQueue$(null);
},

ListQueue$: function(initialCapacity) {
  var t1 = new $.ListQueue(null, 0, 0, 0);
  t1.ListQueue$1(initialCapacity);
  return t1;
},

ListQueue__isPowerOf2: function(number) {
  if (number == null)
    throw number.$sub();
  return (number & number - 1) >>> 0 === 0;
},

ListQueue__nextPowerOf2: function(number) {
  var nextNumber;
  if (number == null)
    throw number.$shl();
  number = (number << 2 >>> 0) - 1;
  for (; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
}}],
["dart.core", "dart:core", , {
NoSuchMethodError_toString_closure: {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if ($.$gt$n(t1.i_1, 0))
      t1.sb_0.write$1(", ");
    t1.sb_0.write$1(key);
    t1.sb_0.write$1(": ");
    t1.sb_0.write$1($.Error_safeToString(value));
    t1.i_1 = $.$add$ns(t1.i_1, 1);
  }
},

Duration: {"": "Object;_duration<",
  $add: function(_, other) {
    return $.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
  },
  $sub: function(_, other) {
    return $.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
  },
  $mul: function(_, factor) {
    if (typeof factor !== "number")
      throw $.iae(factor);
    return $.Duration$(0, 0, $.JSNumber_methods.round$0(this._duration * factor), 0, 0, 0);
  },
  $tdiv: function(_, quotient) {
    if (quotient === 0)
      throw $.wrapException($.IntegerDivisionByZeroException$());
    return $.Duration$(0, 0, $.JSNumber_methods.$tdiv(this._duration, quotient), 0, 0, 0);
  },
  $lt: function(_, other) {
    return this._duration < other.get$_duration();
  },
  $gt: function(_, other) {
    return this._duration > other.get$_duration();
  },
  $le: function(_, other) {
    return this._duration <= other.get$_duration();
  },
  $ge: function(_, other) {
    return this._duration >= other.get$_duration();
  },
  get$inHours: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 3600000000);
  },
  get$inMinutes: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 60000000);
  },
  get$inSeconds: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 1000000);
  },
  get$inMilliseconds: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 1000);
  },
  get$inMicroseconds: function() {
    return this._duration;
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return $.JSNumber_methods.get$hashCode(this._duration);
  },
  toString$0: function(_) {
    var t1, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_twoDigits();
    if (this.get$inMicroseconds() < 0)
      return "-" + $.S($.Duration$(0, 0, -this.get$inMicroseconds(), 0, 0, 0));
    twoDigitMinutes = t1.call$1($.JSNumber_methods.remainder$1(this.get$inMinutes(), 60));
    twoDigitSeconds = t1.call$1($.JSNumber_methods.remainder$1(this.get$inSeconds(), 60));
    sixDigitUs = new $.Duration_toString_sixDigits().call$1($.JSNumber_methods.remainder$1(this.get$inMicroseconds(), 1000000));
    return $.S(this.get$inHours()) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(sixDigitUs);
  },
  $isDuration: true
},

Duration_toString_sixDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return $.S(n);
    if (t1.$ge(n, 10000))
      return "0" + $.S(n);
    if (t1.$ge(n, 1000))
      return "00" + $.S(n);
    if (t1.$ge(n, 100))
      return "000" + $.S(n);
    if (t1.$gt(n, 10))
      return "0000" + $.S(n);
    return "00000" + $.S(n);
  }
},

Duration_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10))
      return $.S(n);
    return "0" + $.S(n);
  }
},

Error: {"": "Object;"},

AssertionError: {"": "Object;"},

TypeError: {"": "Object;"},

CastError: {"": "Object;"},

NullThrownError: {"": "Object;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
},

FallThroughError: {"": "Object;"},

AbstractClassInstantiationError: {"": "Object;_className",
  toString$0: function(_) {
    return "Cannot instantiate abstract class: '" + $.S(this._className) + "'";
  }
},

NoSuchMethodError: {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, t2, t3, t4;
    t1 = {};
    t1.sb_0 = $.StringBuffer$("");
    t1.i_1 = 0;
    for (t2 = this._arguments; t3 = t1.i_1, t4 = $.getInterceptor$n(t3), t4.$lt(t3, t2.length); t1.i_1 = $.$add$ns(t1.i_1, 1)) {
      if (t4.$gt(t3, 0)) {
        t3 = t1.sb_0;
        t3._contents = t3._contents + ", ";
      }
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 >>> 0 !== t4 || t4 >= t2.length)
        throw $.ioore(t4);
      t4 = $.Error_safeToString(t2[t4]);
      t3._contents = t3._contents + t4;
    }
    t2 = this._namedArguments;
    t2.forEach$1(t2, new $.NoSuchMethodError_toString_closure(t1));
    return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\nReceiver: " + $.Error_safeToString(this._receiver) + "\nArguments: [" + $.S(t1.sb_0) + "]";
  }
},

UnsupportedError: {"": "Object;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
},

UnimplementedError: {"": "Object;message",
  toString$0: function(_) {
    return "UnimplementedError";
  }
},

StateError: {"": "Object;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
},

ConcurrentModificationError: {"": "Object;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.Error_safeToString(t1) + ".";
  }
},

StackOverflowError: {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  }
},

CyclicInitializationError: {"": "Object;variableName",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  }
},

_ExceptionImplementation: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
},

FormatException: {"": "Object;message",
  toString$0: function(_) {
    return "FormatException: " + this.message;
  },
  $isException: true
},

IntegerDivisionByZeroException: {"": "Object;",
  toString$0: function(_) {
    return "IntegerDivisionByZeroException";
  },
  $isException: true
},

Expando: {"": "Object;name>",
  toString$0: function(_) {
    return "Expando:" + this.name;
  },
  $index: function(_, object) {
    var values = $.Primitives_getProperty(object, "expando$values");
    return values == null ? null : $.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = $.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = new $.Object();
      $.Primitives_setProperty(object, "expando$values", values);
    }
    $.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = $.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = $.$add$ns(t1, 1);
      key = "expando$key$" + $.S(t1);
      $.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  }
},

Function: {"": "Object;"},

Iterator: {"": "Object;"},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return $.Primitives_objectToString(this);
  }
},

StringBuffer: {"": "Object;_contents",
  get$length: function(_) {
    return this._contents.length;
  },
  write$1: function(obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    iterator = $.get$iterator$ax(objects);
    if (!iterator.moveNext$0())
      return;
    if ($.JSString_methods.get$isEmpty(separator))
      do {
        str = iterator._current;
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      this.write$1(iterator.get$current());
      for (; iterator.moveNext$0();) {
        this._contents = this._contents + separator;
        str = iterator._current;
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  clear$0: function(_) {
    this._contents = "";
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  }
},

Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
  return new $.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
},

Error_safeToString: function(object) {
  var t1;
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0(object);
  if (typeof object === "string") {
    t1 = $.JSString_methods.replaceAll$2(object, "\\", "\\\\");
    $.checkString("\\n");
    t1 = $.stringReplaceAllUnchecked(t1, "\n", "\\n");
    $.checkString("\\r");
    t1 = $.stringReplaceAllUnchecked(t1, "\r", "\\r");
    $.checkString("\\\"");
    return "\"" + $.stringReplaceAllUnchecked(t1, "\"", "\\\"") + "\"";
  }
  return $.Primitives_objectToString(object);
},

ArgumentError$: function(message) {
  return new $.ArgumentError(message);
},

RangeError$value: function(value) {
  return new $.RangeError("value " + $.S(value));
},

RangeError$range: function(value, start, end) {
  return new $.RangeError("value " + $.S(value) + " not in range " + $.S(start) + ".." + $.S(end));
},

NoSuchMethodError$: function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
},

UnsupportedError$: function(message) {
  return new $.UnsupportedError(message);
},

StateError$: function(message) {
  return new $.StateError(message);
},

ConcurrentModificationError$: function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
},

StackOverflowError$: function() {
  return new $.StackOverflowError();
},

CyclicInitializationError$: function(variableName) {
  return new $.CyclicInitializationError(variableName);
},

Exception_Exception: function(message) {
  return $._ExceptionImplementation$(message);
},

_ExceptionImplementation$: function(message) {
  return new $._ExceptionImplementation(message);
},

FormatException$: function(message) {
  return new $.FormatException(message);
},

IntegerDivisionByZeroException$: function() {
  return new $.IntegerDivisionByZeroException();
},

Expando$: function($name) {
  return new $.Expando($name);
},

List_List: function($length) {
  if ($length == null)
    return $.Primitives_newGrowableList(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw $.wrapException($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  return $.Primitives_newFixedList($length);
},

List_List$from: function(other, growable) {
  var list, t1, $length, fixedList, i;
  list = $.List_List(null);
  for (t1 = $.get$iterator$ax(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  if (growable === true)
    return list;
  $length = list.length;
  fixedList = $.List_List($length);
  for (t1 = list.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    fixedList[i] = list[i];
  }
  return fixedList;
},

Map_Map: function() {
  return $.HashMap$();
},

print: function(object) {
  $.Primitives_printString($.toString$0(object));
},

StringBuffer$: function($content) {
  var t1 = new $.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
}}],
["dart.dom.html", "dart:html", , {
_ChildrenElementList: {"": "ListBase;_element,_childElements",
  get$length: function(_) {
    return this._childElements.length;
  },
  $index: function(_, index) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    this._element.replaceChild(value, t1[index]);
  },
  set$length: function(_, newLength) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize element lists"));
  },
  add$1: function(_, value) {
    this._element.appendChild(value);
    return value;
  },
  get$iterator: function(_) {
    return $.get$iterator$ax(this.toList$0(this));
  },
  clear$0: function(_) {
    this._element.textContent = "";
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      this._element.removeChild(result);
    return result;
  },
  get$last: function(_) {
    var result = this._element.lastElementChild;
    if (result == null)
      throw $.wrapException($.StateError$("No elements"));
    return result;
  },
  $asList: function () { return [$.Element]; },
  $asIterable: function () { return [$.Element]; }
},

Interceptor_ListMixin: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.Node]; }, $isIterable: true, $asIterable: function () { return [$.Node]; }},

Interceptor_ListMixin_ImmutableListMixin: {"": "Interceptor_ListMixin+ImmutableListMixin;", $isList: true, $asList: function () { return [$.Node]; }, $isIterable: true, $asIterable: function () { return [$.Node]; }},

_ChildNodeListLazy: {"": "ListBase;_this",
  get$last: function(_) {
    var result = this._this.lastChild;
    if (result == null)
      throw $.wrapException($.StateError$("No elements"));
    return result;
  },
  add$1: function(_, value) {
    this._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = $.JSArray_methods.get$iterator(iterable), t2 = this._this; t1.moveNext$0();)
      t2.appendChild(t1._current);
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      this._this.removeChild(result);
    return result;
  },
  clear$0: function(_) {
    this._this.textContent = "";
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw $.ioore(index);
    t1.replaceChild(value, t2[index]);
  },
  get$iterator: function(_) {
    return $.NodeList_methods.get$iterator(this._this.childNodes);
  },
  get$length: function(_) {
    return this._this.childNodes.length;
  },
  set$length: function(_, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot set length on immutable List."));
  },
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $asList: function () { return [$.Node]; },
  $asIterable: function () { return [$.Node]; }
},

Interceptor_ListMixin0: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.Node]; }, $isIterable: true, $asIterable: function () { return [$.Node]; }},

Interceptor_ListMixin_ImmutableListMixin0: {"": "Interceptor_ListMixin0+ImmutableListMixin;", $isList: true, $asList: function () { return [$.Node]; }, $isIterable: true, $asIterable: function () { return [$.Node]; }},

closure: {"": "Closure;",
  call$1: function(node) {
    throw $.wrapException($.UnsupportedError$("The MDV package is not available. You can enable it with `import 'package:mdv/mdv.dart' as mdv;` and `mdv.initialize()`"));
  }
},

Interceptor_ListMixin1: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.Node]; }, $isIterable: true, $asIterable: function () { return [$.Node]; }},

Interceptor_ListMixin_ImmutableListMixin1: {"": "Interceptor_ListMixin1+ImmutableListMixin;", $isList: true, $asList: function () { return [$.Node]; }, $isIterable: true, $asIterable: function () { return [$.Node]; }},

_AttributeMap: {"": "Object;",
  clear$0: function(_) {
    var t1;
    for (t1 = $.ListIterator$(this.get$keys()); t1.moveNext$0();)
      this.remove$1(this, t1._current);
  },
  forEach$1: function(_, f) {
    var t1, key;
    for (t1 = $.JSArray_methods.get$iterator(this.get$keys()); t1.moveNext$0();) {
      key = t1._current;
      f.call$2(key, this.$index(this, key));
    }
  },
  get$keys: function() {
    var attributes, keys, len, i, t1;
    attributes = this._element.attributes;
    keys = $.List_List(null);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        keys.push($.get$name$x(t1));
    }
    return keys;
  },
  get$values: function(_) {
    var attributes, values, len, i, t1;
    attributes = this._element.attributes;
    values = $.List_List(null);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        values.push($.get$value$x(t1));
    }
    return values;
  },
  $isMap: true,
  $asMap: function () { return [$.JSString, $.JSString]; }
},

_ElementAttributeMap: {"": "_AttributeMap;_element",
  $index: function(_, key) {
    return this._element.getAttribute(key);
  },
  $indexSet: function(_, key, value) {
    this._element.setAttribute(key, value);
  },
  remove$1: function(_, key) {
    var t1, value;
    t1 = this._element;
    value = t1.getAttribute(key);
    t1.removeAttribute(key);
    return value;
  },
  get$length: function(_) {
    return this.get$keys().length;
  },
  _matches$1: function(node) {
    return node.namespaceURI == null;
  }
},

_EventStream: {"": "Stream;_liblib$_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    return $._EventStreamSubscription$(this._liblib$_target, this._eventType, onData, this._useCapture);
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  }
},

_EventStreamSubscription: {"": "StreamSubscription;_pauseCount,_liblib$_target,_eventType,_liblib$_onData,_useCapture",
  cancel$0: function() {
    if (this.get$_canceled())
      return;
    this._unlisten$0();
    this._liblib$_target = null;
    this._liblib$_onData = null;
  },
  get$_canceled: function() {
    return this._liblib$_target == null;
  },
  pause$1: function(_, resumeSignal) {
    if (this.get$_canceled())
      return;
    this._pauseCount = this._pauseCount + 1;
    this._unlisten$0();
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  get$isPaused: function() {
    return this._pauseCount > 0;
  },
  resume$0: function() {
    if (this.get$_canceled() || !this.get$isPaused())
      return;
    this._pauseCount = this._pauseCount - 1;
    this._tryResume$0();
  },
  _tryResume$0: function() {
    var t1 = this._liblib$_onData;
    if (t1 != null && !this.get$isPaused())
      $.$$dom_addEventListener$3$x(this._liblib$_target, this._eventType, t1, this._useCapture);
  },
  _unlisten$0: function() {
    var t1 = this._liblib$_onData;
    if (t1 != null)
      $.$$dom_removeEventListener$3$x(this._liblib$_target, this._eventType, t1, this._useCapture);
  },
  _EventStreamSubscription$4: function(_target, _eventType, _onData, _useCapture) {
    this._tryResume$0();
  }
},

EventStreamProvider: {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    return $._EventStream$(e, this._eventType, useCapture);
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
},

ImmutableListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return new $.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null);
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
},

_WrappedList: {"": "ListBase;_list",
  get$iterator: function(_) {
    return new $._WrappedIterator($.get$iterator$ax(this._list));
  },
  get$length: function(_) {
    return this._list.length;
  },
  add$1: function(_, element) {
    $.add$1$ax(this._list, element);
  },
  clear$0: function(_) {
    $.clear$0$ax(this._list);
  },
  $index: function(_, index) {
    var t1 = this._list;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1 = this._list;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    t1[index] = value;
  },
  set$length: function(_, newLength) {
    $.set$length$asx(this._list, newLength);
  },
  $asList: null,
  $asIterable: null
},

_WrappedIterator: {"": "Object;_liblib$_iterator",
  moveNext$0: function() {
    return this._liblib$_iterator.moveNext$0();
  },
  get$current: function() {
    return this._liblib$_iterator._liblib$_current;
  }
},

FixedSizeListIterator: {"": "Object;_array,_length,_position,_liblib$_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._length;
    if (nextPosition < t1) {
      t1 = this._array;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
        return this.moveNext$0$bailout(2, t1, nextPosition);
      if (nextPosition >>> 0 !== nextPosition || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._liblib$_current = t1[nextPosition];
      this._position = nextPosition;
      return true;
    }
    this._liblib$_current = null;
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, nextPosition) {
    switch (state0) {
      case 0:
        t1 = this._position;
      case 1:
        state0 = 0;
        nextPosition = $.$add$ns(t1, 1);
        t1 = this._length;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$lt$n(nextPosition, t1))
          switch (state0) {
            case 0:
              t1 = this._array;
            case 2:
              state0 = 0;
              this._liblib$_current = $.$index$asx(t1, nextPosition);
              this._position = nextPosition;
              return true;
          }
        this._liblib$_current = null;
        this._position = t1;
        return false;
    }
  },
  get$current: function() {
    return this._liblib$_current;
  }
},

window: function() {
  return window;
},

document: function() {
  return document;
},

_ChildrenElementList$_wrap: function(element) {
  return new $._ChildrenElementList(element, $.get$$$dom_children$x(element));
},

Element_Element$tag: function(tag) {
  return $._ElementFactoryProvider_createElement_tag(tag);
},

_ElementFactoryProvider_createElement_tag: function(tag) {
  return document.createElement(tag);
},

_ChildNodeListLazy$: function(_this) {
  return new $._ChildNodeListLazy(_this);
},

_ElementAttributeMap$: function(element) {
  return new $._ElementAttributeMap(element);
},

_EventStream$: function(_target, _eventType, _useCapture) {
  return new $._EventStream(_target, _eventType, _useCapture);
},

_EventStreamSubscription$: function(_target, _eventType, _onData, _useCapture) {
  var t1 = new $._EventStreamSubscription(0, _target, _eventType, _onData, _useCapture);
  t1._EventStreamSubscription$4(_target, _eventType, _onData, _useCapture);
  return t1;
}}],
["dart.dom.svg", "dart:svg", , {
_SvgElementFactoryProvider_createSvgElement_tag: function(tag) {
  return $.document().createElementNS("http://www.w3.org/2000/svg", tag);
},

_SvgSvgElementFactoryProvider_createSvgSvgElement: function() {
  var el, t1;
  el = $.SvgElement_SvgElement$tag("svg");
  t1 = $.get$attributes$x(el);
  t1.$indexSet(t1, "version", "1.1");
  return el;
},

GElement_GElement: function() {
  return $._SvgElementFactoryProvider_createSvgElement_tag("g");
},

RectElement_RectElement: function() {
  return $._SvgElementFactoryProvider_createSvgElement_tag("rect");
},

SvgElement_SvgElement$tag: function(tag) {
  return $._SvgElementFactoryProvider_createSvgElement_tag(tag);
},

TextElement_TextElement: function() {
  return $.document().createElementNS("http://www.w3.org/2000/svg", "text");
}}],
["dart.isolate", "dart:isolate", , {
ReceivePort: {"": "Object;"},

port: function() {
  return $._Isolate_port();
},

ReceivePort_ReceivePort: function() {
  return $.ReceivePortImpl$();
},

_Isolate_port: function() {
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  return $.lazyPort;
}}],
["dart.json", "dart:json", , {
_convertJsonToDart_closure: {"": "Closure;",
  call$2: function(key, value) {
    return value;
  }
},

_convertJsonToDart_walk: {"": "Closure;revive_0",
  call$1: function(e) {
    var list, t1, i, keys, map, key, proto;
    if (e == null || typeof e != "object")
      return e;
    if (Object.getPrototypeOf(e) === Array.prototype) {
      list = e;
      for (t1 = this.revive_0, i = 0; i < list.length; ++i)
        list[i] = t1.call$2(i, this.call$1(list[i]));
      return list;
    }
    keys = Object.keys(e);
    map = $.makeLiteralMap([]);
    for (t1 = this.revive_0, i = 0; i < keys.length; ++i) {
      key = keys[i];
      map.$indexSet(map, key, t1.call$2(key, this.call$1(e[key])));
    }
    proto = e.__proto__;
    if (typeof proto !== "undefined" && proto !== Object.prototype)
      map.$indexSet(map, "__proto__", t1.call$2("__proto__", this.call$1(proto)));
    return map;
  }
},

_convertJsonToDart: function(json, reviver) {
  var revive = new $._convertJsonToDart_closure();
  return revive.call$2("", new $._convertJsonToDart_walk(revive).call$1(json));
},

parse: function(json, reviver) {
  var parsed, e, t1, exception;
  t1 = json;
  if (typeof t1 !== "string")
    throw $.wrapException($.ArgumentError$(json));
  parsed = null;
  try {
    parsed = JSON.parse(json);
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.wrapException($.FormatException$(String(e)));
  }

  return $._convertJsonToDart(parsed, reviver);
}}],
["dart.math", "dart:math", , {
_Random: {"": "Object;",
  nextDouble$0: function() {
    return Math.random();
  }
},

sin: function(x) {
  return Math.sin($.checkNum(x));
},

cos: function(x) {
  return Math.cos($.checkNum(x));
},

Random_Random: function(seed) {
  return $.C__Random;
}}],
["html_common", "dart:html_common", , {
FilteredElementList: {"": "ListBase;_node,_childNodes",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return $.List_List$from(t1.where$1(t1, new $.FilteredElementList__filtered_closure()), true);
  },
  forEach$1: function(_, f) {
    $.JSArray_methods.forEach$1(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    $.replaceWith$1$x(t1[index], value);
  },
  set$length: function(_, newLength) {
    var len;
    if (typeof newLength !== "number")
      return this.set$length$bailout(1, newLength);
    len = this.get$_filtered().length;
    if (newLength >= len)
      return;
    else if (newLength < 0)
      throw $.wrapException(new $.ArgumentError("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  set$length$bailout: function(state0, newLength) {
    var len, t1;
    len = this.get$_filtered().length;
    t1 = $.getInterceptor$n(newLength);
    if (t1.$ge(newLength, len))
      return;
    else if (t1.$lt(newLength, 0))
      throw $.wrapException(new $.ArgumentError("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  add$1: function(_, value) {
    this._childNodes._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(iterable), t2 = this._childNodes._this; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  removeRange$2: function(_, start, end) {
    $.JSArray_methods.forEach$1($.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new $.FilteredElementList_removeRange_closure());
  },
  clear$0: function(_) {
    this._childNodes._this.textContent = "";
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.remove$0$ax(result);
    return result;
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$iterator: function(_) {
    return $.ListIterator$(this.get$_filtered());
  },
  $asList: null,
  $asIterable: null
},

FilteredElementList__filtered_closure: {"": "Closure;",
  call$1: function(n) {
    return typeof n === "object" && n !== null && !!$.getInterceptor(n).$isElement;
  }
},

FilteredElementList_removeRange_closure: {"": "Closure;",
  call$1: function(el) {
    return $.remove$0$ax(el);
  }
},

Device_userAgent: function() {
  return $.window().navigator.userAgent;
},

Device_isOpera: function() {
  if ($.Device__isOpera == null)
    $.Device__isOpera = $.contains$2$asx($.Device_userAgent(), "Opera", 0);
  return $.Device__isOpera;
},

Device_isWebKit: function() {
  if ($.Device__isWebKit == null)
    $.Device__isWebKit = $.Device_isOpera() !== true && $.contains$2$asx($.Device_userAgent(), "WebKit", 0) === true;
  return $.Device__isWebKit;
},

FilteredElementList$: function(node) {
  return new $.FilteredElementList(node, $.get$nodes$x(node));
}}],
["metadata", "../../dart-bleeding/dart-sdk/lib/html/html_common/metadata.dart", , {
SupportedBrowser: {"": "Object;browserName,minimumVersion"},

Experimental: {"": "Object;"},

DomName: {"": "Object;name>"},

DocsEditable: {"": "Object;"},

Unstable: {"": "Object;"}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

$.main$closure = new $.Closure$main($.main, "main$closure");
$.IsolateNatives__processWorkerMessage$closure = new $.Closure$_processWorkerMessage($.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
$.wrapException$closure = new $.Closure$wrapException($.wrapException, "wrapException$closure");
$.DartError_toStringWrapper$closure = new $.Closure$toStringWrapper($.DartError_toStringWrapper, "DartError_toStringWrapper$closure");
$.invokeClosure$closure = new $.Closure$invokeClosure($.invokeClosure, "invokeClosure$closure");
$.typeNameInChrome$closure = new $.Closure$typeNameInChrome($.typeNameInChrome, "typeNameInChrome$closure");
$.typeNameInSafari$closure = new $.Closure$typeNameInSafari($.typeNameInSafari, "typeNameInSafari$closure");
$.typeNameInOpera$closure = new $.Closure$typeNameInOpera($.typeNameInOpera, "typeNameInOpera$closure");
$.typeNameInFirefox$closure = new $.Closure$typeNameInFirefox($.typeNameInFirefox, "typeNameInFirefox$closure");
$.typeNameInIE$closure = new $.Closure$typeNameInIE($.typeNameInIE, "typeNameInIE$closure");
$.constructorNameFallback$closure = new $.Closure$constructorNameFallback($.constructorNameFallback, "constructorNameFallback$closure");
$._asyncRunCallback$closure = new $.Closure$_asyncRunCallback($._asyncRunCallback, "_asyncRunCallback$closure");
$._nullDataHandler$closure = new $.Closure$_nullDataHandler($._nullDataHandler, "_nullDataHandler$closure");
$._nullErrorHandler$closure = new $.Closure$_nullErrorHandler($._nullErrorHandler, "_nullErrorHandler$closure");
$._nullDoneHandler$closure = new $.Closure$_nullDoneHandler($._nullDoneHandler, "_nullDoneHandler$closure");
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.JSUnknown.prototype;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.JSUnknown.prototype;
  return receiver;
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.JSUnknown.prototype;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
$.NodeList_methods = $.NodeList.prototype;
$.C__DelayedDone = new $._DelayedDone();
$.JSNumber_methods = $.JSNumber.prototype;
$.C_NullThrownError = new $.NullThrownError();
$.JSString_methods = $.JSString.prototype;
$.C__Random = new $._Random();
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.List_empty = Isolate.makeConstantList([]);
$.JSNull_methods = $.JSNull.prototype;
$.JSArray_methods = $.JSArray.prototype;
$.JSInt_methods = $.JSInt.prototype;
$.Duration_30000 = new $.Duration(30000);
$.EventStreamProvider_click = new $.EventStreamProvider("click");
$.Duration_0 = new $.Duration(0);
$.C_CloseToken = new $.CloseToken();
$.C_JSUnknown = new $.JSUnknown();
$.dispatchPropertyName = null;
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$._getTypeNameOf = null;
$.interceptorsByTag = null;
$.leafTags = null;
$._callbacksAreEnqueued = false;
$.Expando__keyCount = 0;
$.Device__isOpera = null;
$.Device__isWebKit = null;
$.$$dom_addEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_addEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_removeEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_replaceChild$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).$$dom_replaceChild$2(receiver, a0, a1);
};
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$asx(receiver).$index(receiver, a0);
};
$.$indexSet$ax = function(receiver, a0, a1) {
  if (receiver.constructor == Array && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return $.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
$.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return $.getInterceptor$n(receiver).$le(receiver, a0);
};
$.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$.$tdiv$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$tdiv(receiver, a0);
};
$.add$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).add$1(receiver, a0);
};
$.clear$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).clear$0(receiver);
};
$.contains$1$asx = function(receiver, a0) {
  return $.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
$.contains$2$asx = function(receiver, a0, a1) {
  return $.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
$.elementAt$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
$.forEach$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
$.get$$$dom_children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_children(receiver);
};
$.get$attributes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$attributes(receiver);
};
$.get$backgroundImage$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$backgroundImage(receiver);
};
$.get$children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$children(receiver);
};
$.get$hashCode$ = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$iterator$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$iterator(receiver);
};
$.get$length$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$length(receiver);
};
$.get$model$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$model(receiver);
};
$.get$name$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$name(receiver);
};
$.get$nodes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$nodes(receiver);
};
$.get$onClick$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onClick(receiver);
};
$.get$value$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$value(receiver);
};
$.getContext$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).getContext$1(receiver, a0);
};
$.remove$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).remove$0(receiver);
};
$.replaceWith$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
$.round$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).round$0(receiver);
};
$.set$attributes$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$attributes(receiver, value);
};
$.set$backgroundImage$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$backgroundImage(receiver, value);
};
$.set$innerHtml$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$innerHtml(receiver, value);
};
$.set$length$asx = function(receiver, value) {
  return $.getInterceptor$asx(receiver).set$length(receiver, value);
};
$.toInt$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).toInt$0(receiver);
};
$.toList$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).toList$0(receiver);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
Isolate.$lazy($, "rnd", "Turtle_rnd", "get$Turtle_rnd", function() {
  return $.Random_Random(null);
});
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return $.Expando$(null);
});
Isolate.$lazy($, "_stackTraceExpando", "_stackTraceExpando", "get$_stackTraceExpando", function() {
  return $.Expando$("asynchronous error");
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return $.Queue_Queue();
});
Isolate.$lazy($, "_current", "_Zone__current", "get$_Zone__current", function() {
  return $._DefaultZone$();
});
Isolate.$lazy($, "mdvPackage", "TemplateElement_mdvPackage", "get$TemplateElement_mdvPackage", function() {
  return new $.closure();
});
// Native classes
$.defineNativeMethodsNonleaf("HTMLElement", $._HTMLElement);

$.defineNativeMethods("HTMLAnchorElement", $.AnchorElement);

$.defineNativeMethods("WebKitAnimationEvent", $.AnimationEvent);

$.defineNativeMethods("HTMLAreaElement", $.AreaElement);

$.defineNativeMethods("HTMLAudioElement", $.AudioElement);

$.defineNativeMethods("AutocompleteErrorEvent", $.AutocompleteErrorEvent);

$.defineNativeMethods("HTMLBRElement", $.BRElement);

$.defineNativeMethods("BarProp", $.BarProp);

$.defineNativeMethods("HTMLBaseElement", $.BaseElement);

$.defineNativeMethods("BeforeLoadEvent", $.BeforeLoadEvent);

$.defineNativeMethods("HTMLBodyElement", $.BodyElement);

$.defineNativeMethods("HTMLButtonElement", $.ButtonElement);

$.defineNativeMethods("CDATASection", $.CDataSection);

$.defineNativeMethods("HTMLCanvasElement", $.CanvasElement);

$.defineNativeMethods("CanvasGradient", $.CanvasGradient);

$.defineNativeMethods("CanvasPattern", $.CanvasPattern);

$.defineNativeMethodsNonleaf("CanvasRenderingContext", $.CanvasRenderingContext);

$.defineNativeMethods("CanvasRenderingContext2D", $.CanvasRenderingContext2D);

$.defineNativeMethodsNonleaf("CharacterData", $.CharacterData);

$.defineNativeMethods("CloseEvent", $.CloseEvent);

$.defineNativeMethods("Comment", $.Comment);

$.defineNativeMethods("CompositionEvent", $.CompositionEvent);

$.defineNativeMethods("HTMLContentElement", $.ContentElement);

$.defineNativeMethods("CSSFontFaceLoadEvent", $.CssFontFaceLoadEvent);

$.defineNativeMethods("CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties", $.CssStyleDeclaration);

$.defineNativeMethods("CustomElementConstructor", $.CustomElementConstructor);

$.defineNativeMethods("CustomEvent", $.CustomEvent);

$.defineNativeMethods("HTMLDListElement", $.DListElement);

$.defineNativeMethods("HTMLDataListElement", $.DataListElement);

$.defineNativeMethods("HTMLDetailsElement", $.DetailsElement);

$.defineNativeMethods("DeviceMotionEvent", $.DeviceMotionEvent);

$.defineNativeMethods("DeviceOrientationEvent", $.DeviceOrientationEvent);

$.defineNativeMethods("HTMLDialogElement", $.DialogElement);

$.defineNativeMethods("HTMLDivElement", $.DivElement);

$.defineNativeMethodsNonleaf("Document", $.Document);

$.defineNativeMethodsNonleaf("DocumentFragment", $.DocumentFragment);

$.defineNativeMethods("DocumentType", $.DocumentType);

$.defineNativeMethods("DOMError", $.DomError);

$.defineNativeMethods("DOMException", $.DomException);

$.defineNativeMethodsNonleaf("Element", $.Element);

$.defineNativeMethods("HTMLEmbedElement", $.EmbedElement);

$.defineNativeMethods("ErrorEvent", $.ErrorEvent);

$.defineNativeMethodsNonleaf("Event", $.Event);

$.defineNativeMethods("EventException", $.EventException);

$.defineNativeMethodsNonleaf("EventTarget", $.EventTarget);

$.defineNativeMethods("HTMLFieldSetElement", $.FieldSetElement);

$.defineNativeMethods("FileError", $.FileError);

$.defineNativeMethods("FileException", $.FileException);

$.defineNativeMethods("FocusEvent", $.FocusEvent);

$.defineNativeMethods("HTMLFormElement", $.FormElement);

$.defineNativeMethods("HTMLHRElement", $.HRElement);

$.defineNativeMethods("HashChangeEvent", $.HashChangeEvent);

$.defineNativeMethods("HTMLHeadElement", $.HeadElement);

$.defineNativeMethods("HTMLHeadingElement", $.HeadingElement);

$.defineNativeMethodsNonleaf("HTMLCollection", $.HtmlCollection);

$.defineNativeMethods("HTMLDocument", $.HtmlDocument);

$.defineNativeMethods("HTMLHtmlElement", $.HtmlElement);

$.defineNativeMethods("HTMLFormControlsCollection", $.HtmlFormControlsCollection);

$.defineNativeMethods("HTMLOptionsCollection", $.HtmlOptionsCollection);

$.defineNativeMethods("XMLHttpRequestProgressEvent", $.HttpRequestProgressEvent);

$.defineNativeMethods("HTMLIFrameElement", $.IFrameElement);

$.defineNativeMethods("HTMLImageElement", $.ImageElement);

$.defineNativeMethods("HTMLInputElement", $.InputElement);

$.defineNativeMethods("KeyboardEvent", $.KeyboardEvent);

$.defineNativeMethods("HTMLKeygenElement", $.KeygenElement);

$.defineNativeMethods("HTMLLIElement", $.LIElement);

$.defineNativeMethods("HTMLLabelElement", $.LabelElement);

$.defineNativeMethods("HTMLLegendElement", $.LegendElement);

$.defineNativeMethods("HTMLLinkElement", $.LinkElement);

$.defineNativeMethods("HTMLMapElement", $.MapElement);

$.defineNativeMethodsNonleaf("HTMLMediaElement", $.MediaElement);

$.defineNativeMethods("MediaError", $.MediaError);

$.defineNativeMethods("MediaKeyError", $.MediaKeyError);

$.defineNativeMethods("MediaKeyEvent", $.MediaKeyEvent);

$.defineNativeMethods("MediaKeyMessageEvent", $.MediaKeyMessageEvent);

$.defineNativeMethods("MediaKeyNeededEvent", $.MediaKeyNeededEvent);

$.defineNativeMethods("MediaStreamEvent", $.MediaStreamEvent);

$.defineNativeMethods("MediaStreamTrackEvent", $.MediaStreamTrackEvent);

$.defineNativeMethods("HTMLMenuElement", $.MenuElement);

$.defineNativeMethods("MessageEvent", $.MessageEvent);

$.defineNativeMethods("HTMLMetaElement", $.MetaElement);

$.defineNativeMethods("HTMLMeterElement", $.MeterElement);

$.defineNativeMethods("MIDIConnectionEvent", $.MidiConnectionEvent);

$.defineNativeMethods("MIDIMessageEvent", $.MidiMessageEvent);

$.defineNativeMethods("HTMLModElement", $.ModElement);

$.defineNativeMethodsNonleaf("DragEvent|MouseEvent", $.MouseEvent);

$.defineNativeMethods("MutationEvent", $.MutationEvent);

$.defineNativeMethods("Navigator", $.Navigator);

$.defineNativeMethods("NavigatorUserMediaError", $.NavigatorUserMediaError);

$.defineNativeMethodsNonleaf("Node", $.Node);

$.defineNativeMethods("NodeList|RadioNodeList", $.NodeList);

$.defineNativeMethods("Notation", $.Notation);

$.defineNativeMethods("HTMLOListElement", $.OListElement);

$.defineNativeMethods("HTMLObjectElement", $.ObjectElement);

$.defineNativeMethods("HTMLOptGroupElement", $.OptGroupElement);

$.defineNativeMethods("HTMLOptionElement", $.OptionElement);

$.defineNativeMethods("HTMLOutputElement", $.OutputElement);

$.defineNativeMethods("OverflowEvent", $.OverflowEvent);

$.defineNativeMethods("PageTransitionEvent", $.PageTransitionEvent);

$.defineNativeMethods("HTMLParagraphElement", $.ParagraphElement);

$.defineNativeMethods("HTMLParamElement", $.ParamElement);

$.defineNativeMethods("PopStateEvent", $.PopStateEvent);

$.defineNativeMethods("PositionError", $.PositionError);

$.defineNativeMethods("HTMLPreElement", $.PreElement);

$.defineNativeMethods("ProcessingInstruction", $.ProcessingInstruction);

$.defineNativeMethods("HTMLProgressElement", $.ProgressElement);

$.defineNativeMethodsNonleaf("ProgressEvent", $.ProgressEvent);

$.defineNativeMethods("HTMLQuoteElement", $.QuoteElement);

$.defineNativeMethods("ResourceProgressEvent", $.ResourceProgressEvent);

$.defineNativeMethods("RTCDataChannelEvent", $.RtcDataChannelEvent);

$.defineNativeMethods("RTCDTMFToneChangeEvent", $.RtcDtmfToneChangeEvent);

$.defineNativeMethods("RTCIceCandidateEvent", $.RtcIceCandidateEvent);

$.defineNativeMethods("HTMLScriptElement", $.ScriptElement);

$.defineNativeMethods("SecurityPolicyViolationEvent", $.SecurityPolicyViolationEvent);

$.defineNativeMethods("HTMLSelectElement", $.SelectElement);

$.defineNativeMethods("HTMLShadowElement", $.ShadowElement);

$.defineNativeMethods("ShadowRoot", $.ShadowRoot);

$.defineNativeMethods("HTMLSourceElement", $.SourceElement);

$.defineNativeMethods("HTMLSpanElement", $.SpanElement);

$.defineNativeMethods("SpeechInputEvent", $.SpeechInputEvent);

$.defineNativeMethods("SpeechRecognitionError", $.SpeechRecognitionError);

$.defineNativeMethods("SpeechRecognitionEvent", $.SpeechRecognitionEvent);

$.defineNativeMethods("SpeechSynthesisEvent", $.SpeechSynthesisEvent);

$.defineNativeMethods("StorageEvent", $.StorageEvent);

$.defineNativeMethods("HTMLStyleElement", $.StyleElement);

$.defineNativeMethods("HTMLTableCaptionElement", $.TableCaptionElement);

$.defineNativeMethods("HTMLTableCellElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement", $.TableCellElement);

$.defineNativeMethods("HTMLTableColElement", $.TableColElement);

$.defineNativeMethods("HTMLTableElement", $.TableElement);

$.defineNativeMethods("HTMLTableRowElement", $.TableRowElement);

$.defineNativeMethods("HTMLTableSectionElement", $.TableSectionElement);

$.defineNativeMethods("HTMLTemplateElement", $.TemplateElement);

$.defineNativeMethodsNonleaf("Text", $.Text);

$.defineNativeMethods("HTMLTextAreaElement", $.TextAreaElement);

$.defineNativeMethods("TextEvent", $.TextEvent);

$.defineNativeMethods("HTMLTitleElement", $.TitleElement);

$.defineNativeMethods("TouchEvent", $.TouchEvent);

$.defineNativeMethods("HTMLTrackElement", $.TrackElement);

$.defineNativeMethods("TrackEvent", $.TrackEvent);

$.defineNativeMethods("TransitionEvent|WebKitTransitionEvent", $.TransitionEvent);

$.defineNativeMethodsNonleaf("UIEvent", $.UIEvent);

$.defineNativeMethods("HTMLUListElement", $.UListElement);

$.defineNativeMethods("HTMLUnknownElement", $.UnknownElement);

$.defineNativeMethods("HTMLVideoElement", $.VideoElement);

$.defineNativeMethods("MouseScrollEvent|MouseWheelEvent|WheelEvent", $.WheelEvent);

$.defineNativeMethods("DOMWindow|Window", $.Window);

$.defineNativeMethods("XPathException", $.XPathException);

$.defineNativeMethods("Attr", $._Attr);

$.defineNativeMethods("Entity", $._Entity);

$.defineNativeMethods("NamedNodeMap", $._NamedNodeMap);

$.defineNativeMethods("IDBVersionChangeEvent", $.VersionChangeEvent);

$.defineNativeMethods("SVGAElement", $.AElement);

$.defineNativeMethods("SVGAltGlyphElement", $.AltGlyphElement);

$.defineNativeMethods("SVGAnimateElement", $.AnimateElement);

$.defineNativeMethods("SVGAnimateMotionElement", $.AnimateMotionElement);

$.defineNativeMethods("SVGAnimateTransformElement", $.AnimateTransformElement);

$.defineNativeMethods("SVGAnimatedLength", $.AnimatedLength);

$.defineNativeMethods("SVGAnimatedLengthList", $.AnimatedLengthList);

$.defineNativeMethods("SVGAnimatedNumber", $.AnimatedNumber);

$.defineNativeMethods("SVGAnimatedNumberList", $.AnimatedNumberList);

$.defineNativeMethodsNonleaf("SVGAnimationElement", $.AnimationElement);

$.defineNativeMethods("SVGCircleElement", $.CircleElement);

$.defineNativeMethods("SVGClipPathElement", $.ClipPathElement);

$.defineNativeMethods("SVGDefsElement", $.DefsElement);

$.defineNativeMethods("SVGDescElement", $.DescElement);

$.defineNativeMethods("SVGEllipseElement", $.EllipseElement);

$.defineNativeMethods("SVGFEBlendElement", $.FEBlendElement);

$.defineNativeMethods("SVGFEColorMatrixElement", $.FEColorMatrixElement);

$.defineNativeMethods("SVGFEComponentTransferElement", $.FEComponentTransferElement);

$.defineNativeMethods("SVGFECompositeElement", $.FECompositeElement);

$.defineNativeMethods("SVGFEConvolveMatrixElement", $.FEConvolveMatrixElement);

$.defineNativeMethods("SVGFEDiffuseLightingElement", $.FEDiffuseLightingElement);

$.defineNativeMethods("SVGFEDisplacementMapElement", $.FEDisplacementMapElement);

$.defineNativeMethods("SVGFEDistantLightElement", $.FEDistantLightElement);

$.defineNativeMethods("SVGFEFloodElement", $.FEFloodElement);

$.defineNativeMethods("SVGFEFuncAElement", $.FEFuncAElement);

$.defineNativeMethods("SVGFEFuncBElement", $.FEFuncBElement);

$.defineNativeMethods("SVGFEFuncGElement", $.FEFuncGElement);

$.defineNativeMethods("SVGFEFuncRElement", $.FEFuncRElement);

$.defineNativeMethods("SVGFEGaussianBlurElement", $.FEGaussianBlurElement);

$.defineNativeMethods("SVGFEImageElement", $.FEImageElement);

$.defineNativeMethods("SVGFEMergeElement", $.FEMergeElement);

$.defineNativeMethods("SVGFEMergeNodeElement", $.FEMergeNodeElement);

$.defineNativeMethods("SVGFEMorphologyElement", $.FEMorphologyElement);

$.defineNativeMethods("SVGFEOffsetElement", $.FEOffsetElement);

$.defineNativeMethods("SVGFEPointLightElement", $.FEPointLightElement);

$.defineNativeMethods("SVGFESpecularLightingElement", $.FESpecularLightingElement);

$.defineNativeMethods("SVGFESpotLightElement", $.FESpotLightElement);

$.defineNativeMethods("SVGFETileElement", $.FETileElement);

$.defineNativeMethods("SVGFETurbulenceElement", $.FETurbulenceElement);

$.defineNativeMethods("SVGFilterElement", $.FilterElement);

$.defineNativeMethods("SVGForeignObjectElement", $.ForeignObjectElement);

$.defineNativeMethods("SVGGElement", $.GElement);

$.defineNativeMethods("SVGImageElement", $.ImageElement0);

$.defineNativeMethods("SVGLineElement", $.LineElement);

$.defineNativeMethods("SVGLinearGradientElement", $.LinearGradientElement);

$.defineNativeMethods("SVGMarkerElement", $.MarkerElement);

$.defineNativeMethods("SVGMaskElement", $.MaskElement);

$.defineNativeMethods("SVGMetadataElement", $.MetadataElement);

$.defineNativeMethods("SVGPathElement", $.PathElement);

$.defineNativeMethods("SVGPatternElement", $.PatternElement);

$.defineNativeMethods("SVGPolygonElement", $.PolygonElement);

$.defineNativeMethods("SVGPolylineElement", $.PolylineElement);

$.defineNativeMethods("SVGRadialGradientElement", $.RadialGradientElement);

$.defineNativeMethods("SVGRectElement", $.RectElement);

$.defineNativeMethods("SVGScriptElement", $.ScriptElement0);

$.defineNativeMethods("SVGSetElement", $.SetElement);

$.defineNativeMethods("SVGStopElement", $.StopElement);

$.defineNativeMethods("SVGStyleElement", $.StyleElement0);

$.defineNativeMethodsNonleaf("SVGStyledElement", $.StyledElement);

$.defineNativeMethods("SVGDocument", $.SvgDocument);

$.defineNativeMethodsNonleaf("SVGElement", $.SvgElement);

$.defineNativeMethods("SVGException", $.SvgException);

$.defineNativeMethods("SVGSVGElement", $.SvgSvgElement);

$.defineNativeMethods("SVGSwitchElement", $.SwitchElement);

$.defineNativeMethods("SVGSymbolElement", $.SymbolElement);

$.defineNativeMethods("SVGTSpanElement", $.TSpanElement);

$.defineNativeMethodsNonleaf("SVGTextContentElement", $.TextContentElement);

$.defineNativeMethods("SVGTextElement", $.TextElement);

$.defineNativeMethods("SVGTextPathElement", $.TextPathElement);

$.defineNativeMethodsNonleaf("SVGTextPositioningElement", $.TextPositioningElement);

$.defineNativeMethods("SVGTitleElement", $.TitleElement0);

$.defineNativeMethods("SVGUseElement", $.UseElement);

$.defineNativeMethods("SVGViewElement", $.ViewElement);

$.defineNativeMethods("SVGZoomEvent", $.ZoomEvent);

$.defineNativeMethodsNonleaf("SVGGradientElement", $._GradientElement);

$.defineNativeMethodsNonleaf("SVGComponentTransferFunctionElement", $._SVGComponentTransferFunctionElement);

$.defineNativeMethods("AudioProcessingEvent", $.AudioProcessingEvent);

$.defineNativeMethods("OfflineAudioCompletionEvent", $.OfflineAudioCompletionEvent);

$.defineNativeMethods("WebGLContextEvent", $.ContextEvent);

$.defineNativeMethods("WebGLRenderingContext", $.RenderingContext);

$.defineNativeMethods("SQLError", $.SqlError);

$.defineNativeMethods("SQLException", $.SqlException);

$.defineNativeMethodsNonleaf("ArrayBufferView", $.TypedData);

$.defineNativeMethods("CanvasPixelArray|Uint8ClampedArray", $.Uint8ClampedList);

$.defineNativeMethodsNonleaf("Uint8Array", $.Uint8List);


init.metadata = [];
var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.initializeDispatchProperty(function(a) {
  $.getDispatchProperty = a;
}, "___dart_dispatch_record_ZxYxX_0_", $.Interceptor.prototype);
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.startRootIsolate($.main$closure); });
      } else {
        $.startRootIsolate($.main$closure);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main$closure); });
  } else {
    $.startRootIsolate($.main$closure);
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], prototype);
        var parameter = "parameter_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = name;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", "c", ["f<"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        if (typeof fields == "string") {
          var s = fields.split(";");
          fields = s[1] == "" ? [] : s[1].split(",");
          supr = s[0];
        } else {
          supr = desc.super;
          if (!!desc.$name)
            name = desc.$name;
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        var constructor = defineClass(name, cls, fields, desc);
        isolateProperties[cls] = constructor;
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return $." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.makeConstantList = oldIsolate.makeConstantList;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
//@ sourceMappingURL=DriftPond.dart.js.map
